{"version":3,"file":"real-time-tracking-BsCweB5J.js","sources":["../../src/components/RealTimeOrderTracking.tsx","../../src/lib/api.ts","../../src/components/RealTimeLocationTracking.tsx","../../src/components/RealTimeChatSystem.tsx","../../src/pages/real-time-tracking.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\n\ninterface Order {\n  id: string\n  status: string\n  driverName?: string\n  estimatedArrival?: string\n  completionPercentage: number\n}\n\nexport default function RealTimeOrderTracking() {\n  const [orders, setOrders] = useState<Order[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchActiveOrders = async () => {\n      try {\n        const response = await fetch('/api/orders/active');\n        if (response.ok) {\n          const data = await response.json();\n          setOrders(data.orders || []);\n        } else {\n          console.error('Failed to fetch active orders');\n          setOrders([]);\n        }\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n        setOrders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchActiveOrders();\n    \n    // Set up real-time updates\n    const interval = setInterval(fetchActiveOrders, 30000);\n    return () => clearInterval(interval);\n  }, [])\n\n  if (loading) {\n    return <div className=\"p-4\">Loading orders...</div>\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {orders.map((order) => (\n        <Card key={order.id} className=\"w-full\">\n          <CardHeader>\n            <CardTitle className=\"flex justify-between items-center\">\n              <span>Order {order.id}</span>\n              <Badge variant={order.status === 'IN_TRANSIT' ? 'default' : 'secondary'}>\n                {order.status}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {order.driverName && (\n                <p className=\"text-sm\">Driver: {order.driverName}</p>\n              )}\n              {order.estimatedArrival && (\n                <p className=\"text-sm\">\n                  ETA: {new Date(order.estimatedArrival).toLocaleString()}\n                </p>\n              )}\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${order.completionPercentage}%` }}\n                />\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                {order.completionPercentage}% Complete\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}","// API configuration and helpers\nconst API_BASE = '/api';\n\ninterface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n}\n\nexport interface DashboardData {\n  user?: any;\n  stats?: {\n    totalOrders?: number;\n    pendingOrders?: number;\n    completedOrders?: number;\n    revenue?: number;\n    wallet?: {\n      balance?: number;\n    };\n  };\n  recentOrders?: any[];\n  notifications?: any[];\n}\n\n// Generic API request helper with enhanced error handling\nasync function apiRequest<T = any>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(`${API_BASE}${endpoint}`, {\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    // Handle different content types\n    let data;\n    const contentType = response.headers.get('content-type');\n    \n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n    } else {\n      const text = await response.text();\n      data = { message: text };\n    }\n\n    if (!response.ok) {\n      const errorMessage = data.message || data.error || `HTTP ${response.status}: Request failed`;\n      throw new Error(errorMessage);\n    }\n\n    // Ensure consistent response format\n    if (data.success !== undefined) {\n      return data;\n    } else {\n      return {\n        success: true,\n        data: data\n      };\n    }\n  } catch (error: any) {\n    console.error(`API Error (${endpoint}):`, error);\n\n    // Log frontend errors to backend (only if not already logging)\n    if (endpoint !== '/analytics/log-error') {\n      try {\n        await fetch('/api/analytics/log-error', {\n          method: 'POST',\n          credentials: 'include',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            endpoint,\n            error: error.message,\n            timestamp: new Date().toISOString(),\n            userAgent: navigator.userAgent,\n            url: window.location.href\n          })\n        });\n      } catch (logError) {\n        console.error('Failed to log error:', logError);\n      }\n    }\n\n    return {\n      success: false,\n      error: error.message || 'Network error occurred'\n    };\n  }\n}\n\n// Real-time WebSocket connection helper\nclass WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private listeners: Map<string, Function[]> = new Map();\n\n  connect() {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}`;\n\n    this.ws = new WebSocket(wsUrl);\n\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.emit(data.type, data.payload);\n      } catch (error) {\n        console.error('WebSocket message parsing error:', error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.reconnect();\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  private reconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => this.connect(), 1000 * this.reconnectAttempts);\n    }\n  }\n\n  on(event: string, callback: Function) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(callback);\n  }\n\n  private emit(event: string, data: any) {\n    const callbacks = this.listeners.get(event) || [];\n    callbacks.forEach(callback => callback(data));\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\nexport const wsManager = new WebSocketManager();\n\n// Authentication APIs with real-time session management\nexport const authApi = {\n  login: async (credentials: { email: string; password: string }) => {\n    const result = await apiRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n\n    if (result.success) {\n      wsManager.connect();\n    }\n\n    return result;\n  },\n\n  register: async (userData: any) => {\n    const result = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n\n    if (result.success) {\n      wsManager.connect();\n    }\n\n    return result;\n  },\n\n  logout: async () => {\n    const result = await apiRequest('/auth/logout', { method: 'POST' });\n    wsManager.disconnect();\n    return result;\n  },\n\n  getCurrentUser: () => apiRequest('/auth/me'),\n\n  verifyOtp: (data: { phone: string; code: string }) =>\n    apiRequest('/auth/verify-otp', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  resendOtp: (phone: string) =>\n    apiRequest('/auth/resend-otp', {\n      method: 'POST',\n      body: JSON.stringify({ phone }),\n    }),\n\n  // Real-time session validation\n  validateSession: () => apiRequest('/auth/validate-session'),\n}\n\n// Mobile-specific API methods\nexport const mobileApi = {\n  // Health check for mobile app\n  healthCheck: async (): Promise<ApiResponse<any>> => {\n    return apiRequest('/mobile/health');\n  },\n\n  // Database status for mobile\n  databaseStatus: async (): Promise<ApiResponse<any>> => {\n    return apiRequest('/mobile/database-status');\n  },\n\n  // Sync test for mobile\n  syncTest: async (): Promise<ApiResponse<any>> => {\n    return apiRequest('/mobile/sync-test');\n  },\n\n  // Get user data for mobile sync\n  getUserData: async (since?: string): Promise<ApiResponse<any>> => {\n    const url = since ? `/auth/me?since=${since}` : '/auth/me';\n    return apiRequest(url);\n  },\n\n  // Get orders for mobile sync\n  getOrdersSync: async (since?: string): Promise<ApiResponse<any>> => {\n    const url = since ? `/orders?since=${since}` : '/orders';\n    return apiRequest(url);\n  },\n\n  // Get transactions for mobile sync\n  getTransactionsSync: async (since?: string): Promise<ApiResponse<any>> => {\n    const url = since ? `/transactions?since=${since}` : '/transactions';\n    return apiRequest(url);\n  },\n\n  // Get notifications for mobile\n  getNotifications: async (since?: string): Promise<ApiResponse<any>> => {\n    const url = since ? `/notifications?since=${since}` : '/notifications';\n    return apiRequest(url);\n  },\n\n  // Real-time analytics for mobile dashboards\n  getRealTimeAnalytics: async (): Promise<ApiResponse<any>> => {\n    return apiRequest('/analytics/metrics/realtime');\n  },\n\n  // Mobile device registration\n  registerDevice: async (deviceInfo: {\n    deviceId: string;\n    platform: 'ios' | 'android';\n    version: string;\n    pushToken?: string;\n  }): Promise<ApiResponse<any>> => {\n    return apiRequest('/mobile/register-device', {\n      method: 'POST',\n      body: JSON.stringify(deviceInfo),\n    });\n  },\n\n  // Update push notification token\n  updatePushToken: async (token: string, platform: 'ios' | 'android'): Promise<ApiResponse<any>> => {\n    return apiRequest('/mobile/update-push-token', {\n      method: 'POST',\n      body: JSON.stringify({ token, platform }),\n    });\n  },\n\n  // Offline action queue sync\n  syncOfflineActions: async (actions: any[]): Promise<ApiResponse<any>> => {\n    return apiRequest('/mobile/sync-offline-actions', {\n      method: 'POST',\n      body: JSON.stringify({ actions }),\n    });\n  },\n};\n\n// Enhanced error handling for mobile\nexport const handleMobileApiError = (error: any): string => {\n  if (error.name === 'TypeError' && error.message === 'Network request failed') {\n    return 'No internet connection. Please check your connection and try again.';\n  }\n  \n  if (error.name === 'AbortError') {\n    return 'Request timed out. Please try again.';\n  }\n  \n  if (error.status === 401) {\n    return 'Your session has expired. Please sign in again.';\n  }\n  \n  if (error.status === 403) {\n    return 'You do not have permission to perform this action.';\n  }\n  \n  if (error.status >= 500) {\n    return 'Server error. Please try again later.';\n  }\n  \n  return error.message || 'An unexpected error occurred.';\n};\n\n// Retry mechanism for mobile\nexport const apiRequestWithRetry = async (\n  endpoint: string,\n  options: RequestInit = {},\n  maxRetries: number = 3\n): Promise<ApiResponse<any>> => {\n  let lastError;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await apiRequest(endpoint, options);\n    } catch (error) {\n      lastError = error;\n      \n      // Don't retry on client errors (4xx)\n      if (error.status >= 400 && error.status < 500) {\n        throw error;\n      }\n      \n      // Wait before retry with exponential backoff\n      if (i < maxRetries - 1) {\n        await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));\n      }\n    }\n  }\n  \n  throw lastError;\n};\n\n// Enhanced Verification APIs with real-time updates\nexport const verificationApi = {\n  getStatus: () => apiRequest('/verification-enhanced/status'),\n\n  uploadDocument: async (formData: FormData) => {\n    const response = await fetch('/api/verification-enhanced/documents/upload', {\n      method: 'POST',\n      credentials: 'include',\n      body: formData,\n    });\n    return response.json();\n  },\n\n  verifyBiometric: (data: {\n    biometricType: 'FACE' | 'FINGERPRINT';\n    biometricData: string;\n    deviceInfo: {\n      deviceId: string;\n      platform: string;\n      version: string;\n    };\n  }) =>\n    apiRequest('/verification-enhanced/biometric/verify', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  submitKyc: (kycData: any) =>\n    apiRequest('/verification-enhanced/kyc/enhanced', {\n      method: 'POST',\n      body: JSON.stringify(kycData),\n    }),\n\n  // Real-time verification status updates\n  subscribeToUpdates: (callback: Function) => {\n    wsManager.on('verification_update', callback);\n  },\n};\n\n// MFA APIs with enhanced security\nexport const mfaApi = {\n  getStatus: () => apiRequest('/mfa/status'),\n\n  setup: (data: {\n    method: 'SMS' | 'EMAIL' | 'TOTP';\n    phoneNumber?: string;\n    email?: string;\n  }) =>\n    apiRequest('/mfa/setup', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  generateToken: (data: { userId: number; method: string }) =>\n    apiRequest('/mfa/generate-token', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  verify: (data: {\n    token: string;\n    method: string;\n    rememberDevice?: boolean;\n  }) =>\n    apiRequest('/mfa/verify', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  disable: (confirmationToken: string) =>\n    apiRequest('/mfa/disable', {\n      method: 'POST',\n      body: JSON.stringify({ confirmationToken }),\n    }),\n};\n\n// Real-time Payment APIs with transaction tracking\nexport const paymentApi = {\n  initializePayment: (data: {\n    amount: number;\n    email: string;\n    orderId?: string;\n    paymentFor?: string;\n  }) =>\n    apiRequest('/payments/initialize', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  verifyPayment: (reference: string) =>\n    apiRequest(`/payments/verify/${reference}`),\n\n  getPaymentMethods: () => apiRequest('/payments/methods'),\n\n  addPaymentMethod: (data: any) =>\n    apiRequest('/payments/methods', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  deletePaymentMethod: (id: string) =>\n    apiRequest(`/payments/methods/${id}`, {\n      method: 'DELETE',\n    }),\n\n  // Real-time payment updates\n  subscribeToPaymentUpdates: (callback: Function) => {\n    wsManager.on('payment_update', callback);\n  },\n};\n\n// Enhanced Wallet APIs with real-time balance updates\nexport const walletApi = {\n  getBalance: () => apiRequest('/wallet/balance'),\n\n  getTransactions: (params: {\n    page?: number;\n    limit?: number;\n    type?: string;\n    startDate?: string;\n    endDate?: string;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/wallet/transactions?${queryParams}`);\n  },\n\n  fundWallet: (amount: number) =>\n    apiRequest('/wallet/fund', {\n      method: 'POST',\n      body: JSON.stringify({ amount }),\n    }),\n\n  withdraw: (data: { amount: number; bankAccount: any }) =>\n    apiRequest('/withdrawal/initiate', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  transfer: (data: {\n    recipientEmail: string;\n    amount: number;\n    description?: string;\n  }) =>\n    apiRequest('/wallet/transfer', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n\n  // Real-time wallet updates\n  subscribeToWalletUpdates: (callback: Function) => {\n    wsManager.on('wallet_update', callback);\n  },\n};\n\n// Enhanced Order APIs with real-time tracking\nexport const orderApi = {\n  getOrders: (params: {\n    status?: string;\n    page?: number;\n    limit?: number;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/orders?${queryParams}`);\n  },\n\n  getOrder: (id: string) => apiRequest(`/orders/${id}`),\n\n  createOrder: (orderData: any) =>\n    apiRequest('/orders', {\n      method: 'POST',\n      body: JSON.stringify(orderData),\n    }),\n\n  updateOrderStatus: (id: string, status: string, location?: any) =>\n    apiRequest(`/orders/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status, location }),\n    }),\n\n  cancelOrder: (id: string, reason?: string) =>\n    apiRequest(`/orders/${id}/cancel`, {\n      method: 'PUT',\n      body: JSON.stringify({ reason }),\n    }),\n\n  // Real-time order tracking\n  subscribeToOrderUpdates: (orderId: string, callback: Function) => {\n    wsManager.on(`order_${orderId}_update`, callback);\n  },\n\n  // Bulk order operations\n  bulkUpdateOrders: (updates: Array<{ id: string; status: string }>) =>\n    apiRequest('/orders/bulk-update', {\n      method: 'PUT',\n      body: JSON.stringify({ updates }),\n    }),\n};\n\n// Categories API\nexport const categoryApi = {\n  getCategories: (params: {\n    includeInactive?: boolean;\n    parentId?: number;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/categories?${queryParams}`);\n  },\n\n  getCategory: (id: string) => apiRequest(`/categories/${id}`),\n\n  createCategory: (categoryData: {\n    name: string;\n    description?: string;\n    parentId?: number;\n    isActive?: boolean;\n    sortOrder?: number;\n  }) =>\n    apiRequest('/categories', {\n      method: 'POST',\n      body: JSON.stringify(categoryData),\n    }),\n\n  updateCategory: (id: string, categoryData: any) =>\n    apiRequest(`/categories/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(categoryData),\n    }),\n\n  deleteCategory: (id: string) =>\n    apiRequest(`/categories/${id}`, {\n      method: 'DELETE',\n    }),\n};\n\n// Enhanced Product APIs with real-time inventory\nexport const productApi = {\n  getProducts: (params: {\n    category?: string;\n    search?: string;\n    page?: number;\n    limit?: number;\n    minPrice?: number;\n    maxPrice?: number;\n    availability?: boolean;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/products?${queryParams}`);\n  },\n\n  getProduct: (id: string) => apiRequest(`/products/${id}`),\n\n  getCategories: () => apiRequest('/products/categories'),\n\n  createProduct: (productData: any) =>\n    apiRequest('/products', {\n      method: 'POST',\n      body: JSON.stringify(productData),\n    }),\n\n  updateProduct: (id: string, productData: any) =>\n    apiRequest(`/products/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(productData),\n    }),\n\n  deleteProduct: (id: string) =>\n    apiRequest(`/products/${id}`, {\n      method: 'DELETE',\n    }),\n\n  // Real-time inventory updates\n  subscribeToInventoryUpdates: (productId: string, callback: Function) => {\n    wsManager.on(`product_${productId}_inventory`, callback);\n  },\n};\n\n// Enhanced Driver APIs with real-time location tracking\nexport const driverApi = {\n  updateLocation: (location: {\n    latitude: number;\n    longitude: number;\n    heading?: number;\n    speed?: number;\n    accuracy?: number;\n  }) =>\n    apiRequest('/drivers/location/update', {\n      method: 'POST',\n      body: JSON.stringify({\n        ...location,\n        timestamp: new Date().toISOString()\n      }),\n    }),\n\n  toggleAvailability: () =>\n    apiRequest('/drivers/availability/toggle', {\n      method: 'POST',\n    }),\n\n  getActiveOrders: () => apiRequest('/drivers/orders/active'),\n\n  acceptOrder: (orderId: string) =>\n    apiRequest(`/drivers/orders/${orderId}/accept`, {\n      method: 'POST',\n    }),\n\n  completeDelivery: (orderId: string, completionData?: any) =>\n    apiRequest(`/drivers/orders/${orderId}/complete`, {\n      method: 'POST',\n      body: JSON.stringify(completionData),\n    }),\n\n  getEarnings: (params: {\n    period?: string;\n    startDate?: string;\n    endDate?: string;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/drivers/earnings?${queryParams}`);\n  },\n\n  // Real-time driver updates\n  subscribeToDriverUpdates: (callback: Function) => {\n    wsManager.on('driver_update', callback);\n  },\n\n  // Performance metrics\n  getPerformanceMetrics: () => apiRequest('/drivers/performance'),\n};\n\n// Enhanced Tracking APIs with real-time updates\nexport const trackingApi = {\n  getOrderTracking: (orderId: string) =>\n    apiRequest(`/tracking/order/${orderId}`),\n\n  getDriverLocation: (driverId: string) =>\n    apiRequest(`/tracking/driver/${driverId}`),\n\n  updateDeliveryStatus: (orderId: string, status: string, location?: any) =>\n    apiRequest(`/tracking/order/${orderId}/status`, {\n      method: 'POST',\n      body: JSON.stringify({ status, location, timestamp: new Date().toISOString() }),\n    }),\n\n  // Real-time tracking subscriptions\n  subscribeToOrderTracking: (orderId: string, callback: Function) => {\n    wsManager.on(`tracking_${orderId}`, callback);\n  },\n\n  subscribeToDriverTracking: (driverId: string, callback: Function) => {\n    wsManager.on(`driver_location_${driverId}`, callback);\n  },\n\n  // Batch tracking updates\n  getMultipleOrderTracking: (orderIds: string[]) =>\n    apiRequest('/tracking/orders/batch', {\n      method: 'POST',\n      body: JSON.stringify({ orderIds }),\n    }),\n};\n\n// Enhanced Support APIs with real-time chat\nexport const supportApi = {\n  createTicket: (ticketData: {\n    subject: string;\n    message: string;\n    priority?: string;\n    category?: string;\n    attachments?: File[];\n  }) => {\n    const formData = new FormData();\n    formData.append('subject', ticketData.subject);\n    formData.append('message', ticketData.message);\n    if (ticketData.priority) formData.append('priority', ticketData.priority);\n    if (ticketData.category) formData.append('category', ticketData.category);\n\n    ticketData.attachments?.forEach((file, index) => {\n      formData.append(`attachment_${index}`, file);\n    });\n\n    return fetch('/api/support/tickets', {\n      method: 'POST',\n      credentials: 'include',\n      body: formData,\n    }).then(res => res.json());\n  },\n\n  getTickets: (params: {\n    status?: string;\n    priority?: string;\n    page?: number;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/support/tickets?${queryParams}`);\n  },\n\n  getTicket: (id: string) => apiRequest(`/support/tickets/${id}`),\n\n  addResponse: (ticketId: string, message: string, attachments?: File[]) => {\n    const formData = new FormData();\n    formData.append('message', message);\n\n    attachments?.forEach((file, index) => {\n      formData.append(`attachment_${index}`, file);\n    });\n\n    return fetch(`/api/support/tickets/${ticketId}/responses`, {\n      method: 'POST',\n      credentials: 'include',\n      body: formData,\n    }).then(res => res.json());\n  },\n\n  // Real-time support updates\n  subscribeToTicketUpdates: (ticketId: string, callback: Function) => {\n    wsManager.on(`ticket_${ticketId}_update`, callback);\n  },\n};\n\n// Enhanced Notification APIs with real-time delivery\nexport const notificationApi = {\n  getNotifications: (params: {\n    page?: number;\n    limit?: number;\n    type?: string;\n    unreadOnly?: boolean;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/notifications?${queryParams}`);\n  },\n\n  markAsRead: (id: string) =>\n    apiRequest(`/notifications/${id}/read`, {\n      method: 'PUT',\n    }),\n\n  markAllAsRead: () =>\n    apiRequest('/notifications/read-all', {\n      method: 'PUT',\n    }),\n\n  deleteNotification: (id: string) =>\n    apiRequest(`/notifications/${id}`, {\n      method: 'DELETE',\n    }),\n\n  // Real-time notification delivery\n  subscribeToNotifications: (callback: Function) => {\n    wsManager.on('new_notification', callback);\n  },\n\n  // Notification preferences\n  getPreferences: () => apiRequest('/notifications/preferences'),\n\n  updatePreferences: (preferences: any) =>\n    apiRequest('/notifications/preferences', {\n      method: 'PUT',\n      body: JSON.stringify(preferences),\n    }),\n};\n\n// Enhanced Analytics APIs with real-time metrics\nexport const analyticsApi = {\n  getDashboardStats: (timeRange?: string) => {\n    const params = timeRange ? `?timeRange=${timeRange}` : '';\n    return apiRequest(`/analytics/dashboard${params}`);\n  },\n\n  getOrderStats: (params: {\n    period?: string;\n    startDate?: string;\n    endDate?: string;\n    groupBy?: string;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/analytics/orders?${queryParams}`);\n  },\n\n  getRevenueStats: (params: {\n    period?: string;\n    startDate?: string;\n    endDate?: string;\n  } = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined) queryParams.append(key, value.toString());\n    });\n\n    return apiRequest(`/analytics/revenue?${queryParams}`);\n  },\n\n  getCustomerStats: () => apiRequest('/analytics/customers'),\n\n  getPopularProducts: (limit?: number) =>\n    apiRequest(`/analytics/products/popular${limit ? `?limit=${limit}` : ''}`),\n\n  // Real-time analytics updates\n  subscribeToAnalytics: (callback: Function) => {\n    wsManager.on('analytics_update', callback);\n  },\n\n  // Performance monitoring\n  getPerformanceMetrics: () => apiRequest('/analytics/performance'),\n\n  // Custom analytics\n  customQuery: (query: any) =>\n    apiRequest('/analytics/custom', {\n      method: 'POST',\n      body: JSON.stringify(query),\n    }),\n};\n\n// Fuel Services APIs\nexport const fuelApi = {\n  getStations: (location?: { lat: number; lng: number; radius?: number }) => {\n    const params = location ? \n      `?lat=${location.lat}&lng=${location.lng}&radius=${location.radius || 5}` : '';\n    return apiRequest(`/fuel/stations${params}`);\n  },\n\n  createFuelOrder: (orderData: {\n    stationId: string;\n    fuelType: string;\n    quantity: number;\n    deliveryLocation: any;\n    scheduledTime?: string;\n  }) =>\n    apiRequest('/fuel/orders', {\n      method: 'POST',\n      body: JSON.stringify(orderData),\n    }),\n\n  getFuelOrders: () => apiRequest('/fuel/orders'),\n\n  getFuelOrder: (id: string) => apiRequest(`/fuel/orders/${id}`),\n\n  cancelFuelOrder: (id: string) =>\n    apiRequest(`/fuel/orders/${id}/cancel`, {\n      method: 'PUT',\n    }),\n};\n\n// Toll Payment APIs\nexport const tollApi = {\n  getTollGates: (route?: { origin: any; destination: any }) => {\n    if (route) {\n      return apiRequest('/toll/gates/route', {\n        method: 'POST',\n        body: JSON.stringify(route),\n      });\n    }\n    return apiRequest('/toll/gates');\n  },\n\n  calculateTollFee: (route: { gateIds: string[]; vehicleType: string }) =>\n    apiRequest('/toll/calculate', {\n      method: 'POST',\n      body: JSON.stringify(route),\n    }),\n\n  payToll: (paymentData: {\n    gateId: string;\n    vehicleType: string;\n    amount: number;\n  }) =>\n    apiRequest('/toll/pay', {\n      method: 'POST',\n      body: JSON.stringify(paymentData),\n    }),\n\n  getTollHistory: () => apiRequest('/toll/history'),\n};\n\n// Initialize WebSocket connection on module load - DISABLED FOR NOW\n// if (typeof window !== 'undefined') {\n//   // Check if user is authenticated before connecting\n//   authApi.getCurrentUser().then(result => {\n//     if (result.success) {\n//       wsManager.connect();\n//     }\n//   });\n// }\n\nconst apiClient = {\n  auth: authApi,\n  verification: verificationApi,\n  mfa: mfaApi,\n  payment: paymentApi,\n  wallet: walletApi,\n  order: orderApi,\n  product: productApi,\n  category: categoryApi,\n  driver: driverApi,\n  tracking: trackingApi,\n  support: supportApi,\n  notification: notificationApi,\n  analytics: analyticsApi,\n  fuel: fuelApi,\n  toll: tollApi,\n  wsManager,\n  getDashboardData: () => apiRequest('/dashboard'),\n};\n\nexport { apiClient };\nexport default apiClient;","\nimport React, { useState, useEffect, useRef } from 'react';\nimport { MapPin, Navigation, Clock, AlertCircle, Truck } from 'lucide-react';\nimport { useAuth } from '../hooks/use-auth';\nimport api from '../lib/api';\n\ninterface LocationData {\n  latitude: number;\n  longitude: number;\n  heading?: number;\n  speed?: number;\n  accuracy?: number;\n  timestamp: string;\n}\n\ninterface OrderTracking {\n  orderId: string;\n  status: string;\n  currentLocation?: LocationData;\n  estimatedArrival?: string;\n  trackingHistory: Array<{\n    status: string;\n    location?: LocationData;\n    timestamp: string;\n    notes?: string;\n  }>;\n  deliveryAddress: any;\n  pickupAddress: any;\n}\n\ninterface Props {\n  orderId?: string;\n  driverId?: string;\n  onLocationUpdate?: (location: LocationData) => void;\n  showControls?: boolean;\n  autoStart?: boolean;\n}\n\nexport default function RealTimeLocationTracking({\n  orderId,\n  driverId,\n  onLocationUpdate,\n  showControls = true,\n  autoStart = false\n}: Props) {\n  const { user } = useAuth();\n  const [isTracking, setIsTracking] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<LocationData | null>(null);\n  const [orderTracking, setOrderTracking] = useState<OrderTracking | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const watchIdRef = useRef<number | null>(null);\n  const lastUpdateRef = useRef<number>(0);\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    if (orderId) {\n      // Subscribe to order tracking updates\n      api.tracking.subscribeToOrderTracking(orderId, (data: any) => {\n        setOrderTracking(prev => prev ? {\n          ...prev,\n          status: data.status,\n          currentLocation: data.location,\n          estimatedArrival: data.estimatedArrival\n        } : null);\n      });\n\n      // Join order tracking room\n      fetchOrderTracking();\n    }\n\n    if (driverId) {\n      // Subscribe to driver location updates\n      api.tracking.subscribeToDriverTracking(driverId, (data: any) => {\n        setCurrentLocation(data.location);\n        if (onLocationUpdate) {\n          onLocationUpdate(data.location);\n        }\n      });\n    }\n\n    return () => {\n      stopTracking();\n    };\n  }, [orderId, driverId]);\n\n  // Auto-start tracking if enabled\n  useEffect(() => {\n    if (autoStart && user?.role === 'DRIVER') {\n      startTracking();\n    }\n  }, [autoStart, user]);\n\n  const fetchOrderTracking = async () => {\n    if (!orderId) return;\n\n    setIsLoading(true);\n    try {\n      const response = await api.tracking.getOrderTracking(orderId);\n      if (response.success) {\n        setOrderTracking(response.tracking);\n        if (response.tracking.currentLocation) {\n          setCurrentLocation(response.tracking.currentLocation);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to fetch order tracking:', error);\n      setError('Failed to load tracking information');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const startTracking = () => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by this browser');\n      return;\n    }\n\n    setError(null);\n    setIsTracking(true);\n\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 5000\n    };\n\n    watchIdRef.current = navigator.geolocation.watchPosition(\n      handleLocationUpdate,\n      handleLocationError,\n      options\n    );\n  };\n\n  const stopTracking = () => {\n    if (watchIdRef.current !== null) {\n      navigator.geolocation.clearWatch(watchIdRef.current);\n      watchIdRef.current = null;\n    }\n    setIsTracking(false);\n  };\n\n  const handleLocationUpdate = async (position: GeolocationPosition) => {\n    const now = Date.now();\n    \n    // Throttle updates to every 5 seconds\n    if (now - lastUpdateRef.current < 5000) {\n      return;\n    }\n    \n    lastUpdateRef.current = now;\n\n    const locationData: LocationData = {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n      heading: position.coords.heading || undefined,\n      speed: position.coords.speed || undefined,\n      accuracy: position.coords.accuracy,\n      timestamp: new Date().toISOString()\n    };\n\n    setCurrentLocation(locationData);\n\n    // Update server if user is a driver\n    if (user?.role === 'DRIVER') {\n      try {\n        await api.driver.updateLocation(locationData);\n      } catch (error) {\n        console.error('Failed to update location on server:', error);\n      }\n    }\n\n    // Call callback if provided\n    if (onLocationUpdate) {\n      onLocationUpdate(locationData);\n    }\n  };\n\n  const handleLocationError = (error: GeolocationPositionError) => {\n    let errorMessage = 'Unknown location error';\n    \n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errorMessage = 'Location access denied. Please enable location permissions.';\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errorMessage = 'Location information unavailable.';\n        break;\n      case error.TIMEOUT:\n        errorMessage = 'Location request timed out.';\n        break;\n    }\n    \n    setError(errorMessage);\n    setIsTracking(false);\n  };\n\n  const updateTrackingStatus = async (status: string, notes?: string) => {\n    if (!orderId) return;\n\n    try {\n      const updateData: any = {\n        status,\n        notes\n      };\n\n      if (currentLocation) {\n        updateData.location = {\n          latitude: currentLocation.latitude,\n          longitude: currentLocation.longitude\n        };\n      }\n\n      const response = await api.tracking.updateDeliveryStatus(orderId, status, updateData.location);\n      \n      if (response.success) {\n        // Refresh tracking data\n        fetchOrderTracking();\n      }\n    } catch (error) {\n      console.error('Failed to update tracking status:', error);\n      setError('Failed to update tracking status');\n    }\n  };\n\n  const formatDistance = (meters: number): string => {\n    if (meters < 1000) {\n      return `${Math.round(meters)}m`;\n    }\n    return `${(meters / 1000).toFixed(1)}km`;\n  };\n\n  const formatSpeed = (speed: number): string => {\n    return `${Math.round(speed * 3.6)} km/h`; // Convert m/s to km/h\n  };\n\n  const formatTime = (dateString: string): string => {\n    return new Date(dateString).toLocaleTimeString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2\">Loading tracking information...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold flex items-center\">\n          <MapPin className=\"h-5 w-5 mr-2 text-blue-600\" />\n          Real-Time Tracking\n        </h3>\n        \n        {showControls && user?.role === 'DRIVER' && (\n          <div className=\"flex space-x-2\">\n            {!isTracking ? (\n              <button\n                onClick={startTracking}\n                className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center\"\n              >\n                <Navigation className=\"h-4 w-4 mr-2\" />\n                Start Tracking\n              </button>\n            ) : (\n              <button\n                onClick={stopTracking}\n                className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\n              >\n                Stop Tracking\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg flex items-center\">\n          <AlertCircle className=\"h-4 w-4 mr-2\" />\n          {error}\n        </div>\n      )}\n\n      {/* Current Location Display */}\n      {currentLocation && (\n        <div className=\"mb-6 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900 mb-2\">Current Location</h4>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600\">Coordinates:</span>\n              <div className=\"font-mono\">\n                {currentLocation.latitude.toFixed(6)}, {currentLocation.longitude.toFixed(6)}\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Last Update:</span>\n              <div>{formatTime(currentLocation.timestamp)}</div>\n            </div>\n            {currentLocation.speed !== undefined && (\n              <div>\n                <span className=\"text-gray-600\">Speed:</span>\n                <div>{formatSpeed(currentLocation.speed)}</div>\n              </div>\n            )}\n            {currentLocation.accuracy && (\n              <div>\n                <span className=\"text-gray-600\">Accuracy:</span>\n                <div>{formatDistance(currentLocation.accuracy)}</div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Order Tracking Information */}\n      {orderTracking && (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"font-medium\">Order #{orderTracking.orderId}</h4>\n            <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n              orderTracking.status === 'DELIVERED' ? 'bg-green-100 text-green-800' :\n              orderTracking.status === 'IN_TRANSIT' ? 'bg-blue-100 text-blue-800' :\n              orderTracking.status === 'PICKED_UP' ? 'bg-yellow-100 text-yellow-800' :\n              'bg-gray-100 text-gray-800'\n            }`}>\n              {orderTracking.status.replace('_', ' ')}\n            </span>\n          </div>\n\n          {orderTracking.estimatedArrival && (\n            <div className=\"flex items-center text-sm text-gray-600\">\n              <Clock className=\"h-4 w-4 mr-2\" />\n              Estimated arrival: {formatTime(orderTracking.estimatedArrival)}\n            </div>\n          )}\n\n          {/* Driver Status Updates (for drivers) */}\n          {user?.role === 'DRIVER' && orderId && (\n            <div className=\"flex space-x-2 pt-4 border-t\">\n              <button\n                onClick={() => updateTrackingStatus('PICKED_UP')}\n                className=\"flex-1 px-3 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 text-sm\"\n              >\n                Mark Picked Up\n              </button>\n              <button\n                onClick={() => updateTrackingStatus('DELIVERED')}\n                className=\"flex-1 px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\n              >\n                Mark Delivered\n              </button>\n            </div>\n          )}\n\n          {/* Tracking History */}\n          <div className=\"pt-4 border-t\">\n            <h5 className=\"font-medium mb-3\">Tracking History</h5>\n            <div className=\"space-y-3\">\n              {orderTracking.trackingHistory.map((event, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className={`w-3 h-3 rounded-full mt-1 ${\n                    event.status === 'DELIVERED' ? 'bg-green-500' :\n                    event.status === 'IN_TRANSIT' ? 'bg-blue-500' :\n                    event.status === 'PICKED_UP' ? 'bg-yellow-500' :\n                    'bg-gray-400'\n                  }`} />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium text-sm\">\n                        {event.status.replace('_', ' ')}\n                      </span>\n                      <span className=\"text-xs text-gray-500\">\n                        {formatTime(event.timestamp)}\n                      </span>\n                    </div>\n                    {event.notes && (\n                      <p className=\"text-sm text-gray-600 mt-1\">{event.notes}</p>\n                    )}\n                    {event.location && (\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {event.location.latitude.toFixed(4)}, {event.location.longitude.toFixed(4)}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tracking Status Indicator */}\n      <div className=\"mt-6 pt-4 border-t\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-gray-600\">Tracking Status:</span>\n          <span className={`flex items-center ${isTracking ? 'text-green-600' : 'text-gray-400'}`}>\n            <div className={`w-2 h-2 rounded-full mr-2 ${isTracking ? 'bg-green-500' : 'bg-gray-400'}`} />\n            {isTracking ? 'Active' : 'Inactive'}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Send, MessageCircle } from 'lucide-react'\n\ninterface Message {\n  id: string\n  sender: string\n  content: string\n  timestamp: string\n  type: 'sent' | 'received'\n}\n\nexport default function RealTimeChatSystem() {\n  const [messages, setMessages] = useState<Message[]>([])\n  const [newMessage, setNewMessage] = useState('')\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Simulate initial messages\n    const mockMessages: Message[] = [\n      {\n        id: '1',\n        sender: 'Ahmed (Driver)',\n        content: 'I am on my way to deliver your fuel order',\n        timestamp: new Date(Date.now() - 300000).toISOString(),\n        type: 'received'\n      },\n      {\n        id: '2',\n        sender: 'You',\n        content: 'Great! How long will it take?',\n        timestamp: new Date(Date.now() - 240000).toISOString(),\n        type: 'sent'\n      },\n      {\n        id: '3',\n        sender: 'Ahmed (Driver)',\n        content: 'About 15 minutes. I\\'m currently at Allen Avenue',\n        timestamp: new Date(Date.now() - 180000).toISOString(),\n        type: 'received'\n      }\n    ]\n    \n    setMessages(mockMessages)\n    setLoading(false)\n  }, [])\n\n  const sendMessage = () => {\n    if (!newMessage.trim()) return\n\n    const message: Message = {\n      id: Date.now().toString(),\n      sender: 'You',\n      content: newMessage,\n      timestamp: new Date().toISOString(),\n      type: 'sent'\n    }\n\n    setMessages(prev => [...prev, message])\n    setNewMessage('')\n\n    // Simulate driver response after 2 seconds\n    setTimeout(() => {\n      const response: Message = {\n        id: (Date.now() + 1).toString(),\n        sender: 'Ahmed (Driver)',\n        content: 'Got it! Will update you shortly.',\n        timestamp: new Date().toISOString(),\n        type: 'received'\n      }\n      setMessages(prev => [...prev, response])\n    }, 2000)\n  }\n\n  if (loading) {\n    return <div className=\"p-4\">Loading chat...</div>\n  }\n\n  return (\n    <Card className=\"w-full h-96\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <MessageCircle className=\"h-5 w-5\" />\n          Chat with Driver\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex flex-col h-full\">\n        <div className=\"flex-1 overflow-y-auto space-y-3 mb-4\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.type === 'sent' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-xs rounded-lg p-3 ${\n                  message.type === 'sent'\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-100 text-gray-900'\n                }`}\n              >\n                <p className=\"text-sm font-medium\">{message.sender}</p>\n                <p className=\"text-sm\">{message.content}</p>\n                <p className=\"text-xs opacity-75 mt-1\">\n                  {new Date(message.timestamp).toLocaleTimeString()}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"flex gap-2\">\n          <Input\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            placeholder=\"Type a message...\"\n            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n            className=\"flex-1\"\n          />\n          <Button onClick={sendMessage} size=\"icon\">\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { MapPin, MessageSquare, Package, Truck, ArrowLeft, Phone, Navigation, Clock } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport RealTimeOrderTracking from '../components/RealTimeOrderTracking';\nimport RealTimeLocationTracking from '../components/RealTimeLocationTracking';\nimport RealTimeChatSystem from '../components/RealTimeChatSystem';\nimport LiveMap from '../components/ui/live-map';\nimport { NotificationModal } from '../components/ui/notification-modal';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useWebSocket, useOrderUpdates, useDriverTracking, useNotifications } from '@/hooks/use-websocket';\n\nexport default function RealTimeTrackingPage() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [selectedOrderId, setSelectedOrderId] = useState<string>('ORDER-123');\n  const [selectedChatRoom, setSelectedChatRoom] = useState<string>('order_123');\n  const [loading, setLoading] = useState(true);\n  const [orderInfo, setOrderInfo] = useState<any>(null);\n  const [participants, setParticipants] = useState<any[]>([]);\n  const [activeOrders, setActiveOrders] = useState<any[]>([]);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [userLocation, setUserLocation] = useState<any>(null);\n  const [trackingEnabled, setTrackingEnabled] = useState(false);\n\n  // WebSocket hooks\n  const { socket, connected, emit } = useWebSocket();\n  const { orders } = useOrderUpdates();\n  const { driverLocation, eta, updateDriverLocation } = useDriverTracking(selectedOrderId);\n  const { notifications, markAsRead } = useNotifications();\n\n  // Local state for notifications\n  const [currentNotification, setCurrentNotification] = useState<any>(null);\n\n  useEffect(() => {\n    // Simulate loading order data\n    const mockOrderInfo = {\n      id: selectedOrderId,\n      status: 'IN_TRANSIT',\n      customer: {\n        id: 1,\n        name: 'John Doe',\n        phone: '+234 801 234 5678',\n        address: '15 Victoria Island, Lagos'\n      },\n      merchant: {\n        id: 2,\n        name: 'TotalEnergies Station',\n        phone: '+234 803 456 7890',\n        address: '10 Lekki Phase 1, Lagos'\n      },\n      driver: {\n        id: 3,\n        name: 'Ahmed Musa',\n        phone: '+234 805 678 9012',\n        vehicle: 'Toyota Hilux - ABC 123 XY'\n      },\n      items: [\n        { name: 'Premium Petrol', quantity: '20L', price: '₦8,000' }\n      ],\n      totalAmount: '₦8,500',\n      estimatedArrival: new Date(Date.now() + 1800000).toISOString(),\n      createdAt: new Date(Date.now() - 1800000).toISOString()\n    };\n\n    setOrderInfo(mockOrderInfo);\n    setParticipants([mockOrderInfo.customer, mockOrderInfo.merchant, mockOrderInfo.driver]);\n    setLoading(false);\n\n    // Subscribe to order updates when component mounts\n    if (connected && selectedOrderId) {\n      emit('subscribe_order_tracking', selectedOrderId);\n    }\n  }, [connected, selectedOrderId, emit]);\n\n  useEffect(() => {\n    // Show latest notification\n    if (notifications.length > 0 && !notifications[0].read) {\n      setCurrentNotification({\n        id: notifications[0].id,\n        title: notifications[0].title,\n        message: notifications[0].message,\n        type: notifications[0].type,\n        timestamp: notifications[0].timestamp.getTime(),\n        actions: [\n          {\n            label: 'View Order',\n            action: () => setLocation('/track-order'),\n            variant: 'default'\n          }\n        ]\n      });\n    }\n  }, [notifications, setLocation]);\n\n  const handleChatWithDriver = () => {\n    setSelectedChatRoom('customer_driver_123');\n  };\n\n  const handleChatWithMerchant = () => {\n    setSelectedChatRoom('customer_merchant_123');\n  };\n\n  const handleCallDriver = () => {\n    if (orderInfo?.driver?.phone) {\n      window.location.href = `tel:${orderInfo.driver.phone}`;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'CONFIRMED':\n        return 'bg-blue-100 text-blue-800';\n      case 'IN_TRANSIT':\n        return 'bg-green-100 text-green-800';\n      case 'DELIVERED':\n        return 'bg-emerald-100 text-emerald-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading real-time tracking...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-16 pb-20\">\n      <div className=\"max-w-md mx-auto p-4 space-y-4\">\n        {/* Header */}\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation('/consumer-home')}\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-xl font-bold\">Real-Time Tracking</h1>\n            <p className=\"text-sm text-gray-600\">Live order and delivery updates</p>\n          </div>\n        </div>\n\n        {/* Connection Status */}\n        <Card className=\"mb-4\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <div className={`h-3 w-3 rounded-full ${connected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />\n                <span className=\"text-sm font-medium\">\n                  {connected ? 'Connected' : 'Disconnected'}\n                </span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Real-time\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Summary */}\n        {orderInfo && (\n          <Card className=\"mb-4\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"flex justify-between items-center text-base\">\n                <span>Order {orderInfo.id}</span>\n                <Badge className={getStatusColor(orderInfo.status)}>\n                  {orderInfo.status}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Driver:</span>\n                  <span className=\"font-medium\">{orderInfo.driver.name}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Vehicle:</span>\n                  <span className=\"font-medium\">{orderInfo.driver.vehicle}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">ETA:</span>\n                  <span className=\"font-medium text-green-600\">\n                    {eta || 'Calculating...'}\n                  </span>\n                </div>\n                <div className=\"flex gap-2 mt-3\">\n                  <Button size=\"sm\" variant=\"outline\" onClick={handleCallDriver} className=\"flex-1\">\n                    <Phone className=\"h-4 w-4 mr-1\" />\n                    Call\n                  </Button>\n                  <Button size=\"sm\" onClick={handleChatWithDriver} className=\"flex-1\">\n                    <MessageSquare className=\"h-4 w-4 mr-1\" />\n                    Chat\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Real-Time Tracking Tabs */}\n        <Tabs defaultValue=\"location\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"location\" className=\"text-xs\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              Location\n            </TabsTrigger>\n            <TabsTrigger value=\"order\" className=\"text-xs\">\n              <Package className=\"h-4 w-4 mr-1\" />\n              Order\n            </TabsTrigger>\n            <TabsTrigger value=\"chat\" className=\"text-xs\">\n              <MessageSquare className=\"h-4 w-4 mr-1\" />\n              Chat\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"location\" className=\"mt-4 space-y-4\">\n            <LiveMap\n              driverLocation={driverLocation ? {\n                latitude: driverLocation.latitude,\n                longitude: driverLocation.longitude\n              } : undefined}\n              customerLocation={orderInfo ? {\n                latitude: 6.4281,\n                longitude: 3.4219 // Lagos coordinates\n              } : undefined}\n              orderId={selectedOrderId}\n            />\n\n            <RealTimeLocationTracking />\n\n            {/* ETA Card */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Clock className=\"h-5 w-5 text-blue-500\" />\n                  <div>\n                    <h3 className=\"font-medium\">Estimated Arrival</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {eta || 'Calculating route...'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"order\" className=\"mt-4\">\n            <RealTimeOrderTracking />\n\n            {/* Order Timeline */}\n            <Card className=\"mt-4\">\n              <CardHeader>\n                <CardTitle className=\"text-base\">Order Timeline</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-2 w-2 rounded-full bg-green-500 mt-2 flex-shrink-0\" />\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium\">Order Confirmed</p>\n                      <p className=\"text-gray-500 text-xs\">\n                        {new Date(orderInfo?.createdAt).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-2 w-2 rounded-full bg-blue-500 mt-2 flex-shrink-0\" />\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium\">Driver Assigned</p>\n                      <p className=\"text-gray-500 text-xs\">\n                        {orderInfo?.driver.name} • {orderInfo?.driver.vehicle}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-2 w-2 rounded-full bg-yellow-500 mt-2 flex-shrink-0 animate-pulse\" />\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium\">In Transit</p>\n                      <p className=\"text-gray-500 text-xs\">Currently delivering your order</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"chat\" className=\"mt-4\">\n            <RealTimeChatSystem />\n\n            {/* Quick Actions */}\n            <Card className=\"mt-4\">\n              <CardHeader>\n                <CardTitle className=\"text-base\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start\"\n                    onClick={handleChatWithMerchant}\n                  >\n                    <MessageSquare className=\"h-4 w-4 mr-2\" />\n                    Chat with Merchant\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start\"\n                    onClick={() => setLocation('/support')}\n                  >\n                    <MessageSquare className=\"h-4 w-4 mr-2\" />\n                    Contact Support\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Notification Modal */}\n      <NotificationModal\n        notification={currentNotification}\n        onClose={() => {\n          setCurrentNotification(null);\n          if (currentNotification) {\n            markAsRead(currentNotification.id);\n          }\n        }}\n      />\n    </div>\n  );\n}"],"names":["RealTimeOrderTracking","orders","setOrders","useState","loading","setLoading","useEffect","fetchActiveOrders","response","data","error","interval","jsx","order","jsxs","Card","CardHeader","CardTitle","Badge","CardContent","API_BASE","apiRequest","endpoint","options","contentType","errorMessage","logError","WebSocketManager","__publicField","wsUrl","event","callback","wsManager","authApi","credentials","result","userData","phone","verificationApi","formData","kycData","mfaApi","confirmationToken","paymentApi","reference","id","walletApi","params","queryParams","key","value","amount","orderApi","orderData","status","location","reason","orderId","updates","categoryApi","categoryData","productApi","productData","productId","driverApi","completionData","trackingApi","driverId","orderIds","supportApi","ticketData","_a","file","index","res","ticketId","message","attachments","notificationApi","preferences","analyticsApi","timeRange","limit","query","fuelApi","tollApi","route","paymentData","apiClient","RealTimeLocationTracking","onLocationUpdate","showControls","autoStart","user","useAuth","isTracking","setIsTracking","currentLocation","setCurrentLocation","orderTracking","setOrderTracking","setError","isLoading","setIsLoading","watchIdRef","useRef","lastUpdateRef","api","prev","fetchOrderTracking","stopTracking","startTracking","handleLocationUpdate","handleLocationError","position","now","locationData","updateTrackingStatus","notes","updateData","formatDistance","meters","formatSpeed","speed","formatTime","dateString","MapPin","Navigation","AlertCircle","Clock","RealTimeChatSystem","messages","setMessages","newMessage","setNewMessage","mockMessages","sendMessage","MessageCircle","Input","e","Button","Send","RealTimeTrackingPage","setLocation","useLocation","selectedOrderId","setSelectedOrderId","selectedChatRoom","setSelectedChatRoom","orderInfo","setOrderInfo","participants","setParticipants","activeOrders","setActiveOrders","selectedOrder","setSelectedOrder","userLocation","setUserLocation","trackingEnabled","setTrackingEnabled","connected","emit","useWebSocket","useOrderUpdates","driverLocation","eta","useDriverTracking","notifications","markAsRead","useNotifications","currentNotification","setCurrentNotification","mockOrderInfo","handleChatWithDriver","handleChatWithMerchant","handleCallDriver","getStatusColor","ArrowLeft","Phone","MessageSquare","Tabs","TabsList","TabsTrigger","Package","TabsContent","LiveMap","NotificationModal"],"mappings":"6jBAYA,SAAwBA,IAAwB,CAC9C,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAkB,CAAA,CAAE,EAC1C,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAI,EA4B3C,OA1BAG,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAoB,SAAY,CACpC,GAAI,CACF,MAAMC,EAAW,MAAM,MAAM,oBAAoB,EACjD,GAAIA,EAAS,GAAI,CACf,MAAMC,EAAO,MAAMD,EAAS,KAAA,EAC5BN,EAAUO,EAAK,QAAU,EAAE,CAC7B,MACE,QAAQ,MAAM,+BAA+B,EAC7CP,EAAU,CAAA,CAAE,CAEhB,OAASQ,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CR,EAAU,CAAA,CAAE,CACd,QAAA,CACEG,EAAW,EAAK,CAClB,CACF,EAEAE,EAAA,EAGA,MAAMI,EAAW,YAAYJ,EAAmB,GAAK,EACrD,MAAO,IAAM,cAAcI,CAAQ,CACrC,EAAG,CAAA,CAAE,EAEDP,EACKQ,EAAAA,IAAC,MAAA,CAAI,UAAU,MAAM,SAAA,oBAAiB,EAI7CA,EAAAA,IAAC,MAAA,CAAI,UAAU,YACZ,SAAAX,EAAO,IAAKY,GACXC,EAAAA,KAACC,EAAA,CAAoB,UAAU,SAC7B,SAAA,CAAAH,MAACI,EAAA,CACC,SAAAF,EAAAA,KAACG,EAAA,CAAU,UAAU,oCACnB,SAAA,CAAAH,OAAC,OAAA,CAAK,SAAA,CAAA,SAAOD,EAAM,EAAA,EAAG,EACtBD,EAAAA,IAACM,GAAM,QAASL,EAAM,SAAW,aAAe,UAAY,YACzD,SAAAA,EAAM,MAAA,CACT,CAAA,CAAA,CACF,CAAA,CACF,EACAD,MAACO,EAAA,CACC,SAAAL,EAAAA,KAAC,MAAA,CAAI,UAAU,YACZ,SAAA,CAAAD,EAAM,YACLC,OAAC,IAAA,CAAE,UAAU,UAAU,SAAA,CAAA,WAASD,EAAM,UAAA,EAAW,EAElDA,EAAM,kBACLC,OAAC,IAAA,CAAE,UAAU,UAAU,SAAA,CAAA,QACf,IAAI,KAAKD,EAAM,gBAAgB,EAAE,eAAA,CAAe,EACxD,EAEFD,EAAAA,IAAC,MAAA,CAAI,UAAU,sCACb,SAAAA,EAAAA,IAAC,MAAA,CACC,UAAU,2DACV,MAAO,CAAE,MAAO,GAAGC,EAAM,oBAAoB,GAAA,CAAI,CAAA,EAErD,EACAC,EAAAA,KAAC,IAAA,CAAE,UAAU,wBACV,SAAA,CAAAD,EAAM,qBAAqB,YAAA,CAAA,CAC9B,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAAA,EA7BSA,EAAM,EA8BjB,CACD,EACH,CAEJ,CClFA,MAAMO,GAAW,OAyBjB,eAAeC,EACbC,EACAC,EAAuB,GACE,CACzB,GAAI,CACF,MAAMf,EAAW,MAAM,MAAM,GAAGY,EAAQ,GAAGE,CAAQ,GAAI,CACrD,YAAa,UACb,QAAS,CACP,eAAgB,mBAChB,GAAGC,EAAQ,OAAA,EAEb,GAAGA,CAAA,CACJ,EAGD,IAAId,EACJ,MAAMe,EAAchB,EAAS,QAAQ,IAAI,cAAc,EASvD,GAPIgB,GAAeA,EAAY,SAAS,kBAAkB,EACxDf,EAAO,MAAMD,EAAS,KAAA,EAGtBC,EAAO,CAAE,QADI,MAAMD,EAAS,KAAA,CACV,EAGhB,CAACA,EAAS,GAAI,CAChB,MAAMiB,EAAehB,EAAK,SAAWA,EAAK,OAAS,QAAQD,EAAS,MAAM,mBAC1E,MAAM,IAAI,MAAMiB,CAAY,CAC9B,CAGA,OAAIhB,EAAK,UAAY,OACZA,EAEA,CACL,QAAS,GACT,KAAAA,CAAA,CAGN,OAASC,EAAY,CAInB,GAHA,QAAQ,MAAM,cAAcY,CAAQ,KAAMZ,CAAK,EAG3CY,IAAa,uBACf,GAAI,CACF,MAAM,MAAM,2BAA4B,CACtC,OAAQ,OACR,YAAa,UACb,QAAS,CAAE,eAAgB,kBAAA,EAC3B,KAAM,KAAK,UAAU,CACnB,SAAAA,EACA,MAAOZ,EAAM,QACb,UAAW,IAAI,KAAA,EAAO,YAAA,EACtB,UAAW,UAAU,UACrB,IAAK,OAAO,SAAS,IAAA,CACtB,CAAA,CACF,CACH,OAASgB,EAAU,CACjB,QAAQ,MAAM,uBAAwBA,CAAQ,CAChD,CAGF,MAAO,CACL,QAAS,GACT,MAAOhB,EAAM,SAAW,wBAAA,CAE5B,CACF,CAGA,MAAMiB,EAAiB,CAAvB,cACUC,EAAA,UAAuB,MACvBA,EAAA,yBAAoB,GACpBA,EAAA,4BAAuB,GACvBA,EAAA,qBAAyC,KAEjD,SAAU,CAER,MAAMC,EAAQ,GADG,OAAO,SAAS,WAAa,SAAW,OAAS,KACzC,KAAK,OAAO,SAAS,IAAI,GAElD,KAAK,GAAK,IAAI,UAAUA,CAAK,EAE7B,KAAK,GAAG,OAAS,IAAM,CACrB,QAAQ,IAAI,qBAAqB,EACjC,KAAK,kBAAoB,CAC3B,EAEA,KAAK,GAAG,UAAaC,GAAU,CAC7B,GAAI,CACF,MAAMrB,EAAO,KAAK,MAAMqB,EAAM,IAAI,EAClC,KAAK,KAAKrB,EAAK,KAAMA,EAAK,OAAO,CACnC,OAASC,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,CACzD,CACF,EAEA,KAAK,GAAG,QAAU,IAAM,CACtB,QAAQ,IAAI,wBAAwB,EACpC,KAAK,UAAA,CACP,EAEA,KAAK,GAAG,QAAWA,GAAU,CAC3B,QAAQ,MAAM,mBAAoBA,CAAK,CACzC,CACF,CAEQ,WAAY,CACd,KAAK,kBAAoB,KAAK,uBAChC,KAAK,oBACL,WAAW,IAAM,KAAK,QAAA,EAAW,IAAO,KAAK,iBAAiB,EAElE,CAEA,GAAGoB,EAAeC,EAAoB,CAC/B,KAAK,UAAU,IAAID,CAAK,GAC3B,KAAK,UAAU,IAAIA,EAAO,CAAA,CAAE,EAE9B,KAAK,UAAU,IAAIA,CAAK,EAAG,KAAKC,CAAQ,CAC1C,CAEQ,KAAKD,EAAerB,EAAW,EACnB,KAAK,UAAU,IAAIqB,CAAK,GAAK,CAAA,GACrC,QAAQC,GAAYA,EAAStB,CAAI,CAAC,CAC9C,CAEA,YAAa,CACP,KAAK,KACP,KAAK,GAAG,MAAA,EACR,KAAK,GAAK,KAEd,CACF,CAEO,MAAMuB,EAAY,IAAIL,GAGhBM,GAAU,CACrB,MAAO,MAAOC,GAAqD,CACjE,MAAMC,EAAS,MAAMd,EAAW,cAAe,CAC7C,OAAQ,OACR,KAAM,KAAK,UAAUa,CAAW,CAAA,CACjC,EAED,OAAIC,EAAO,SACTH,EAAU,QAAA,EAGLG,CACT,EAEA,SAAU,MAAOC,GAAkB,CACjC,MAAMD,EAAS,MAAMd,EAAW,iBAAkB,CAChD,OAAQ,OACR,KAAM,KAAK,UAAUe,CAAQ,CAAA,CAC9B,EAED,OAAID,EAAO,SACTH,EAAU,QAAA,EAGLG,CACT,EAEA,OAAQ,SAAY,CAClB,MAAMA,EAAS,MAAMd,EAAW,eAAgB,CAAE,OAAQ,OAAQ,EAClE,OAAAW,EAAU,WAAA,EACHG,CACT,EAEA,eAAgB,IAAMd,EAAW,UAAU,EAE3C,UAAYZ,GACVY,EAAW,mBAAoB,CAC7B,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,UAAY4B,GACVhB,EAAW,mBAAoB,CAC7B,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,MAAAgB,EAAO,CAAA,CAC/B,EAGH,gBAAiB,IAAMhB,EAAW,wBAAwB,CAC5D,EAqIaiB,GAAkB,CAC7B,UAAW,IAAMjB,EAAW,+BAA+B,EAE3D,eAAgB,MAAOkB,IACJ,MAAM,MAAM,8CAA+C,CAC1E,OAAQ,OACR,YAAa,UACb,KAAMA,CAAA,CACP,GACe,KAAA,EAGlB,gBAAkB9B,GAShBY,EAAW,0CAA2C,CACpD,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,UAAY+B,GACVnB,EAAW,sCAAuC,CAChD,OAAQ,OACR,KAAM,KAAK,UAAUmB,CAAO,CAAA,CAC7B,EAGH,mBAAqBT,GAAuB,CAC1CC,EAAU,GAAG,sBAAuBD,CAAQ,CAC9C,CACF,EAGaU,GAAS,CACpB,UAAW,IAAMpB,EAAW,aAAa,EAEzC,MAAQZ,GAKNY,EAAW,aAAc,CACvB,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,cAAgBA,GACdY,EAAW,sBAAuB,CAChC,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,OAASA,GAKPY,EAAW,cAAe,CACxB,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,QAAUiC,GACRrB,EAAW,eAAgB,CACzB,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,kBAAAqB,EAAmB,CAAA,CAC3C,CACL,EAGaC,GAAa,CACxB,kBAAoBlC,GAMlBY,EAAW,uBAAwB,CACjC,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,cAAgBmC,GACdvB,EAAW,oBAAoBuB,CAAS,EAAE,EAE5C,kBAAmB,IAAMvB,EAAW,mBAAmB,EAEvD,iBAAmBZ,GACjBY,EAAW,oBAAqB,CAC9B,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,oBAAsBoC,GACpBxB,EAAW,qBAAqBwB,CAAE,GAAI,CACpC,OAAQ,QAAA,CACT,EAGH,0BAA4Bd,GAAuB,CACjDC,EAAU,GAAG,iBAAkBD,CAAQ,CACzC,CACF,EAGae,GAAY,CACvB,WAAY,IAAMzB,EAAW,iBAAiB,EAE9C,gBAAiB,CAAC0B,EAMd,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,wBAAwB2B,CAAW,EAAE,CACzD,EAEA,WAAaG,GACX9B,EAAW,eAAgB,CACzB,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,OAAA8B,EAAQ,CAAA,CAChC,EAEH,SAAW1C,GACTY,EAAW,uBAAwB,CACjC,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAEH,SAAWA,GAKTY,EAAW,mBAAoB,CAC7B,OAAQ,OACR,KAAM,KAAK,UAAUZ,CAAI,CAAA,CAC1B,EAGH,yBAA2BsB,GAAuB,CAChDC,EAAU,GAAG,gBAAiBD,CAAQ,CACxC,CACF,EAGaqB,GAAW,CACtB,UAAW,CAACL,EAIR,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,WAAW2B,CAAW,EAAE,CAC5C,EAEA,SAAWH,GAAexB,EAAW,WAAWwB,CAAE,EAAE,EAEpD,YAAcQ,GACZhC,EAAW,UAAW,CACpB,OAAQ,OACR,KAAM,KAAK,UAAUgC,CAAS,CAAA,CAC/B,EAEH,kBAAmB,CAACR,EAAYS,EAAgBC,IAC9ClC,EAAW,WAAWwB,CAAE,UAAW,CACjC,OAAQ,MACR,KAAM,KAAK,UAAU,CAAE,OAAAS,EAAQ,SAAAC,EAAU,CAAA,CAC1C,EAEH,YAAa,CAACV,EAAYW,IACxBnC,EAAW,WAAWwB,CAAE,UAAW,CACjC,OAAQ,MACR,KAAM,KAAK,UAAU,CAAE,OAAAW,EAAQ,CAAA,CAChC,EAGH,wBAAyB,CAACC,EAAiB1B,IAAuB,CAChEC,EAAU,GAAG,SAASyB,CAAO,UAAW1B,CAAQ,CAClD,EAGA,iBAAmB2B,GACjBrC,EAAW,sBAAuB,CAChC,OAAQ,MACR,KAAM,KAAK,UAAU,CAAE,QAAAqC,EAAS,CAAA,CACjC,CACL,EAGaC,GAAc,CACzB,cAAe,CAACZ,EAGZ,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,eAAe2B,CAAW,EAAE,CAChD,EAEA,YAAcH,GAAexB,EAAW,eAAewB,CAAE,EAAE,EAE3D,eAAiBe,GAOfvC,EAAW,cAAe,CACxB,OAAQ,OACR,KAAM,KAAK,UAAUuC,CAAY,CAAA,CAClC,EAEH,eAAgB,CAACf,EAAYe,IAC3BvC,EAAW,eAAewB,CAAE,GAAI,CAC9B,OAAQ,MACR,KAAM,KAAK,UAAUe,CAAY,CAAA,CAClC,EAEH,eAAiBf,GACfxB,EAAW,eAAewB,CAAE,GAAI,CAC9B,OAAQ,QAAA,CACT,CACL,EAGagB,GAAa,CACxB,YAAa,CAACd,EAQV,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,aAAa2B,CAAW,EAAE,CAC9C,EAEA,WAAaH,GAAexB,EAAW,aAAawB,CAAE,EAAE,EAExD,cAAe,IAAMxB,EAAW,sBAAsB,EAEtD,cAAgByC,GACdzC,EAAW,YAAa,CACtB,OAAQ,OACR,KAAM,KAAK,UAAUyC,CAAW,CAAA,CACjC,EAEH,cAAe,CAACjB,EAAYiB,IAC1BzC,EAAW,aAAawB,CAAE,GAAI,CAC5B,OAAQ,MACR,KAAM,KAAK,UAAUiB,CAAW,CAAA,CACjC,EAEH,cAAgBjB,GACdxB,EAAW,aAAawB,CAAE,GAAI,CAC5B,OAAQ,QAAA,CACT,EAGH,4BAA6B,CAACkB,EAAmBhC,IAAuB,CACtEC,EAAU,GAAG,WAAW+B,CAAS,aAAchC,CAAQ,CACzD,CACF,EAGaiC,GAAY,CACvB,eAAiBT,GAOflC,EAAW,2BAA4B,CACrC,OAAQ,OACR,KAAM,KAAK,UAAU,CACnB,GAAGkC,EACH,UAAW,IAAI,KAAA,EAAO,YAAA,CAAY,CACnC,CAAA,CACF,EAEH,mBAAoB,IAClBlC,EAAW,+BAAgC,CACzC,OAAQ,MAAA,CACT,EAEH,gBAAiB,IAAMA,EAAW,wBAAwB,EAE1D,YAAcoC,GACZpC,EAAW,mBAAmBoC,CAAO,UAAW,CAC9C,OAAQ,MAAA,CACT,EAEH,iBAAkB,CAACA,EAAiBQ,IAClC5C,EAAW,mBAAmBoC,CAAO,YAAa,CAChD,OAAQ,OACR,KAAM,KAAK,UAAUQ,CAAc,CAAA,CACpC,EAEH,YAAa,CAAClB,EAIV,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,qBAAqB2B,CAAW,EAAE,CACtD,EAGA,yBAA2BjB,GAAuB,CAChDC,EAAU,GAAG,gBAAiBD,CAAQ,CACxC,EAGA,sBAAuB,IAAMV,EAAW,sBAAsB,CAChE,EAGa6C,GAAc,CACzB,iBAAmBT,GACjBpC,EAAW,mBAAmBoC,CAAO,EAAE,EAEzC,kBAAoBU,GAClB9C,EAAW,oBAAoB8C,CAAQ,EAAE,EAE3C,qBAAsB,CAACV,EAAiBH,EAAgBC,IACtDlC,EAAW,mBAAmBoC,CAAO,UAAW,CAC9C,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,OAAAH,EAAQ,SAAAC,EAAU,UAAW,IAAI,OAAO,aAAY,CAAG,CAAA,CAC/E,EAGH,yBAA0B,CAACE,EAAiB1B,IAAuB,CACjEC,EAAU,GAAG,YAAYyB,CAAO,GAAI1B,CAAQ,CAC9C,EAEA,0BAA2B,CAACoC,EAAkBpC,IAAuB,CACnEC,EAAU,GAAG,mBAAmBmC,CAAQ,GAAIpC,CAAQ,CACtD,EAGA,yBAA2BqC,GACzB/C,EAAW,yBAA0B,CACnC,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,SAAA+C,EAAU,CAAA,CAClC,CACL,EAGaC,GAAa,CACxB,aAAeC,GAMT,OACJ,MAAM/B,EAAW,IAAI,SACrB,OAAAA,EAAS,OAAO,UAAW+B,EAAW,OAAO,EAC7C/B,EAAS,OAAO,UAAW+B,EAAW,OAAO,EACzCA,EAAW,UAAU/B,EAAS,OAAO,WAAY+B,EAAW,QAAQ,EACpEA,EAAW,UAAU/B,EAAS,OAAO,WAAY+B,EAAW,QAAQ,GAExEC,EAAAD,EAAW,cAAX,MAAAC,EAAwB,QAAQ,CAACC,EAAMC,IAAU,CAC/ClC,EAAS,OAAO,cAAckC,CAAK,GAAID,CAAI,CAC7C,GAEO,MAAM,uBAAwB,CACnC,OAAQ,OACR,YAAa,UACb,KAAMjC,CAAA,CACP,EAAE,KAAKmC,GAAOA,EAAI,MAAM,CAC3B,EAEA,WAAY,CAAC3B,EAIT,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,oBAAoB2B,CAAW,EAAE,CACrD,EAEA,UAAYH,GAAexB,EAAW,oBAAoBwB,CAAE,EAAE,EAE9D,YAAa,CAAC8B,EAAkBC,EAAiBC,IAAyB,CACxE,MAAMtC,EAAW,IAAI,SACrB,OAAAA,EAAS,OAAO,UAAWqC,CAAO,EAElCC,GAAA,MAAAA,EAAa,QAAQ,CAACL,EAAMC,IAAU,CACpClC,EAAS,OAAO,cAAckC,CAAK,GAAID,CAAI,CAC7C,GAEO,MAAM,wBAAwBG,CAAQ,aAAc,CACzD,OAAQ,OACR,YAAa,UACb,KAAMpC,CAAA,CACP,EAAE,KAAKmC,GAAOA,EAAI,MAAM,CAC3B,EAGA,yBAA0B,CAACC,EAAkB5C,IAAuB,CAClEC,EAAU,GAAG,UAAU2C,CAAQ,UAAW5C,CAAQ,CACpD,CACF,EAGa+C,GAAkB,CAC7B,iBAAkB,CAAC/B,EAKf,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,kBAAkB2B,CAAW,EAAE,CACnD,EAEA,WAAaH,GACXxB,EAAW,kBAAkBwB,CAAE,QAAS,CACtC,OAAQ,KAAA,CACT,EAEH,cAAe,IACbxB,EAAW,0BAA2B,CACpC,OAAQ,KAAA,CACT,EAEH,mBAAqBwB,GACnBxB,EAAW,kBAAkBwB,CAAE,GAAI,CACjC,OAAQ,QAAA,CACT,EAGH,yBAA2Bd,GAAuB,CAChDC,EAAU,GAAG,mBAAoBD,CAAQ,CAC3C,EAGA,eAAgB,IAAMV,EAAW,4BAA4B,EAE7D,kBAAoB0D,GAClB1D,EAAW,6BAA8B,CACvC,OAAQ,MACR,KAAM,KAAK,UAAU0D,CAAW,CAAA,CACjC,CACL,EAGaC,GAAe,CAC1B,kBAAoBC,GAAuB,CACzC,MAAMlC,EAASkC,EAAY,cAAcA,CAAS,GAAK,GACvD,OAAO5D,EAAW,uBAAuB0B,CAAM,EAAE,CACnD,EAEA,cAAe,CAACA,EAKZ,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,qBAAqB2B,CAAW,EAAE,CACtD,EAEA,gBAAiB,CAACD,EAId,KAAO,CACT,MAAMC,EAAc,IAAI,gBACxB,cAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC3CA,IAAU,QAAWF,EAAY,OAAOC,EAAKC,EAAM,UAAU,CACnE,CAAC,EAEM7B,EAAW,sBAAsB2B,CAAW,EAAE,CACvD,EAEA,iBAAkB,IAAM3B,EAAW,sBAAsB,EAEzD,mBAAqB6D,GACnB7D,EAAW,8BAA8B6D,EAAQ,UAAUA,CAAK,GAAK,EAAE,EAAE,EAG3E,qBAAuBnD,GAAuB,CAC5CC,EAAU,GAAG,mBAAoBD,CAAQ,CAC3C,EAGA,sBAAuB,IAAMV,EAAW,wBAAwB,EAGhE,YAAc8D,GACZ9D,EAAW,oBAAqB,CAC9B,OAAQ,OACR,KAAM,KAAK,UAAU8D,CAAK,CAAA,CAC3B,CACL,EAGaC,GAAU,CACrB,YAAc7B,GAA6D,CACzE,MAAMR,EAASQ,EACb,QAAQA,EAAS,GAAG,QAAQA,EAAS,GAAG,WAAWA,EAAS,QAAU,CAAC,GAAK,GAC9E,OAAOlC,EAAW,iBAAiB0B,CAAM,EAAE,CAC7C,EAEA,gBAAkBM,GAOhBhC,EAAW,eAAgB,CACzB,OAAQ,OACR,KAAM,KAAK,UAAUgC,CAAS,CAAA,CAC/B,EAEH,cAAe,IAAMhC,EAAW,cAAc,EAE9C,aAAewB,GAAexB,EAAW,gBAAgBwB,CAAE,EAAE,EAE7D,gBAAkBA,GAChBxB,EAAW,gBAAgBwB,CAAE,UAAW,CACtC,OAAQ,KAAA,CACT,CACL,EAGawC,GAAU,CACrB,aAAeC,GACTA,EACKjE,EAAW,oBAAqB,CACrC,OAAQ,OACR,KAAM,KAAK,UAAUiE,CAAK,CAAA,CAC3B,EAEIjE,EAAW,aAAa,EAGjC,iBAAmBiE,GACjBjE,EAAW,kBAAmB,CAC5B,OAAQ,OACR,KAAM,KAAK,UAAUiE,CAAK,CAAA,CAC3B,EAEH,QAAUC,GAKRlE,EAAW,YAAa,CACtB,OAAQ,OACR,KAAM,KAAK,UAAUkE,CAAW,CAAA,CACjC,EAEH,eAAgB,IAAMlE,EAAW,eAAe,CAClD,EAYMmE,EAAY,CAChB,KAAMvD,GACN,aAAcK,GACd,IAAKG,GACL,QAASE,GACT,OAAQG,GACR,MAAOM,GACP,QAASS,GACT,SAAUF,GACV,OAAQK,GACR,SAAUE,GACV,QAASG,GACT,aAAcS,GACd,UAAWE,GACX,KAAMI,GACN,KAAMC,GACN,UAAArD,EACA,iBAAkB,IAAMX,EAAW,YAAY,CACjD,ECz6BA,SAAwBoE,GAAyB,CAC/C,QAAAhC,EACA,SAAAU,EACA,iBAAAuB,EACA,aAAAC,EAAe,GACf,UAAAC,EAAY,EACd,EAAU,CACR,KAAM,CAAE,KAAAC,CAAA,EAASC,EAAA,EACX,CAACC,EAAYC,CAAa,EAAI7F,EAAAA,SAAS,EAAK,EAC5C,CAAC8F,EAAiBC,CAAkB,EAAI/F,EAAAA,SAA8B,IAAI,EAC1E,CAACgG,EAAeC,CAAgB,EAAIjG,EAAAA,SAA+B,IAAI,EACvE,CAACO,EAAO2F,CAAQ,EAAIlG,EAAAA,SAAwB,IAAI,EAChD,CAACmG,EAAWC,CAAY,EAAIpG,EAAAA,SAAS,EAAK,EAC1CqG,EAAaC,EAAAA,OAAsB,IAAI,EACvCC,EAAgBD,EAAAA,OAAe,CAAC,EAGtCnG,EAAAA,UAAU,KACJmD,IAEFkD,EAAI,SAAS,yBAAyBlD,EAAUhD,GAAc,CAC5D2F,KAAyBQ,EAAO,CAC9B,GAAGA,EACH,OAAQnG,EAAK,OACb,gBAAiBA,EAAK,SACtB,iBAAkBA,EAAK,gBAAA,EACrB,IAAI,CACV,CAAC,EAGDoG,EAAA,GAGE1C,GAEFwC,EAAI,SAAS,0BAA0BxC,EAAW1D,GAAc,CAC9DyF,EAAmBzF,EAAK,QAAQ,EAC5BiF,GACFA,EAAiBjF,EAAK,QAAQ,CAElC,CAAC,EAGI,IAAM,CACXqG,EAAA,CACF,GACC,CAACrD,EAASU,CAAQ,CAAC,EAGtB7D,EAAAA,UAAU,IAAM,CACVsF,IAAaC,GAAA,YAAAA,EAAM,QAAS,UAC9BkB,EAAA,CAEJ,EAAG,CAACnB,EAAWC,CAAI,CAAC,EAEpB,MAAMgB,EAAqB,SAAY,CACrC,GAAKpD,EAEL,CAAA8C,EAAa,EAAI,EACjB,GAAI,CACF,MAAM/F,EAAW,MAAMmG,EAAI,SAAS,iBAAiBlD,CAAO,EACxDjD,EAAS,UACX4F,EAAiB5F,EAAS,QAAQ,EAC9BA,EAAS,SAAS,iBACpB0F,EAAmB1F,EAAS,SAAS,eAAe,EAG1D,OAASE,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtD2F,EAAS,qCAAqC,CAChD,QAAA,CACEE,EAAa,EAAK,CACpB,EACF,EAEMQ,EAAgB,IAAM,CAC1B,GAAI,CAAC,UAAU,YAAa,CAC1BV,EAAS,8CAA8C,EACvD,MACF,CAEAA,EAAS,IAAI,EACbL,EAAc,EAAI,EAElB,MAAMzE,EAAU,CACd,mBAAoB,GACpB,QAAS,IACT,WAAY,GAAA,EAGdiF,EAAW,QAAU,UAAU,YAAY,cACzCQ,EACAC,EACA1F,CAAA,CAEJ,EAEMuF,EAAe,IAAM,CACrBN,EAAW,UAAY,OACzB,UAAU,YAAY,WAAWA,EAAW,OAAO,EACnDA,EAAW,QAAU,MAEvBR,EAAc,EAAK,CACrB,EAEMgB,EAAuB,MAAOE,GAAkC,CACpE,MAAMC,EAAM,KAAK,IAAA,EAGjB,GAAIA,EAAMT,EAAc,QAAU,IAChC,OAGFA,EAAc,QAAUS,EAExB,MAAMC,EAA6B,CACjC,SAAUF,EAAS,OAAO,SAC1B,UAAWA,EAAS,OAAO,UAC3B,QAASA,EAAS,OAAO,SAAW,OACpC,MAAOA,EAAS,OAAO,OAAS,OAChC,SAAUA,EAAS,OAAO,SAC1B,UAAW,IAAI,KAAA,EAAO,YAAA,CAAY,EAMpC,GAHAhB,EAAmBkB,CAAY,GAG3BvB,GAAA,YAAAA,EAAM,QAAS,SACjB,GAAI,CACF,MAAMc,EAAI,OAAO,eAAeS,CAAY,CAC9C,OAAS1G,EAAO,CACd,QAAQ,MAAM,uCAAwCA,CAAK,CAC7D,CAIEgF,GACFA,EAAiB0B,CAAY,CAEjC,EAEMH,EAAuBvG,GAAoC,CAC/D,IAAIe,EAAe,yBAEnB,OAAQf,EAAM,KAAA,CACZ,KAAKA,EAAM,kBACTe,EAAe,8DACf,MACF,KAAKf,EAAM,qBACTe,EAAe,oCACf,MACF,KAAKf,EAAM,QACTe,EAAe,8BACf,KAAA,CAGJ4E,EAAS5E,CAAY,EACrBuE,EAAc,EAAK,CACrB,EAEMqB,EAAuB,MAAO/D,EAAgBgE,IAAmB,CACrE,GAAK7D,EAEL,GAAI,CACF,MAAM8D,EAAkB,CACtB,OAAAjE,EACA,MAAAgE,CAAA,EAGErB,IACFsB,EAAW,SAAW,CACpB,SAAUtB,EAAgB,SAC1B,UAAWA,EAAgB,SAAA,IAId,MAAMU,EAAI,SAAS,qBAAqBlD,EAASH,EAAQiE,EAAW,QAAQ,GAEhF,SAEXV,EAAA,CAEJ,OAASnG,EAAO,CACd,QAAQ,MAAM,oCAAqCA,CAAK,EACxD2F,EAAS,kCAAkC,CAC7C,CACF,EAEMmB,EAAkBC,GAClBA,EAAS,IACJ,GAAG,KAAK,MAAMA,CAAM,CAAC,IAEvB,IAAIA,EAAS,KAAM,QAAQ,CAAC,CAAC,KAGhCC,EAAeC,GACZ,GAAG,KAAK,MAAMA,EAAQ,GAAG,CAAC,QAG7BC,EAAcC,GACX,IAAI,KAAKA,CAAU,EAAE,mBAAA,EAG9B,OAAIvB,EAEAxF,EAAAA,KAAC,MAAA,CAAI,UAAU,uCACb,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,UAAU,8DAAA,CAA+D,EAC9EA,EAAAA,IAAC,OAAA,CAAK,UAAU,OAAO,SAAA,iCAAA,CAA+B,CAAA,EACxD,EAKFE,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yCACb,SAAA,CAAAA,EAAAA,KAAC,KAAA,CAAG,UAAU,0CACZ,SAAA,CAAAF,EAAAA,IAACkH,EAAA,CAAO,UAAU,4BAAA,CAA6B,EAAE,oBAAA,EAEnD,EAECnC,IAAgBE,GAAA,YAAAA,EAAM,QAAS,gBAC7B,MAAA,CAAI,UAAU,iBACZ,SAACE,EASAnF,EAAAA,IAAC,SAAA,CACC,QAASkG,EACT,UAAU,8DACX,SAAA,eAAA,CAAA,EAXDhG,EAAAA,KAAC,SAAA,CACC,QAASiG,EACT,UAAU,oFAEV,SAAA,CAAAnG,EAAAA,IAACmH,EAAA,CAAW,UAAU,cAAA,CAAe,EAAE,gBAAA,CAAA,CAAA,CASzC,CAEJ,CAAA,EAEJ,EAECrH,GACCI,EAAAA,KAAC,MAAA,CAAI,UAAU,sFACb,SAAA,CAAAF,EAAAA,IAACoH,GAAA,CAAY,UAAU,cAAA,CAAe,EACrCtH,CAAA,EACH,EAIDuF,GACCnF,EAAAA,KAAC,MAAA,CAAI,UAAU,iCACb,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAG,UAAU,iCAAiC,SAAA,mBAAgB,EAC/DE,EAAAA,KAAC,MAAA,CAAI,UAAU,iCACb,SAAA,CAAAA,OAAC,MAAA,CACC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,eAAY,EAC5CE,EAAAA,KAAC,MAAA,CAAI,UAAU,YACZ,SAAA,CAAAmF,EAAgB,SAAS,QAAQ,CAAC,EAAE,KAAGA,EAAgB,UAAU,QAAQ,CAAC,CAAA,CAAA,CAC7E,CAAA,EACF,SACC,MAAA,CACC,SAAA,CAAArF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,eAAY,EAC5CA,EAAAA,IAAC,MAAA,CAAK,SAAAgH,EAAW3B,EAAgB,SAAS,CAAA,CAAE,CAAA,EAC9C,EACCA,EAAgB,QAAU,QACzBnF,EAAAA,KAAC,MAAA,CACC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,SAAM,EACtCA,EAAAA,IAAC,MAAA,CAAK,SAAA8G,EAAYzB,EAAgB,KAAK,CAAA,CAAE,CAAA,EAC3C,EAEDA,EAAgB,UACfnF,EAAAA,KAAC,MAAA,CACC,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,YAAS,EACzCA,EAAAA,IAAC,MAAA,CAAK,SAAA4G,EAAevB,EAAgB,QAAQ,CAAA,CAAE,CAAA,CAAA,CACjD,CAAA,CAAA,CAEJ,CAAA,EACF,EAIDE,GACCrF,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAA,EAAAA,KAAC,KAAA,CAAG,UAAU,cAAc,SAAA,CAAA,UAAQqF,EAAc,OAAA,EAAQ,EAC1DvF,EAAAA,IAAC,QAAK,UAAW,8CACfuF,EAAc,SAAW,YAAc,8BACvCA,EAAc,SAAW,aAAe,4BACxCA,EAAc,SAAW,YAAc,gCACvC,2BACF,GACG,WAAc,OAAO,QAAQ,IAAK,GAAG,CAAA,CACxC,CAAA,EACF,EAECA,EAAc,kBACbrF,OAAC,MAAA,CAAI,UAAU,0CACb,SAAA,CAAAF,EAAAA,IAACqH,EAAA,CAAM,UAAU,cAAA,CAAe,EAAE,sBACdL,EAAWzB,EAAc,gBAAgB,CAAA,EAC/D,GAIDN,GAAA,YAAAA,EAAM,QAAS,UAAYpC,GAC1B3C,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAF,EAAAA,IAAC,SAAA,CACC,QAAS,IAAMyG,EAAqB,WAAW,EAC/C,UAAU,gFACX,SAAA,gBAAA,CAAA,EAGDzG,EAAAA,IAAC,SAAA,CACC,QAAS,IAAMyG,EAAqB,WAAW,EAC/C,UAAU,8EACX,SAAA,gBAAA,CAAA,CAED,EACF,EAIFvG,EAAAA,KAAC,MAAA,CAAI,UAAU,gBACb,SAAA,CAAAF,EAAAA,IAAC,KAAA,CAAG,UAAU,mBAAmB,SAAA,mBAAgB,EACjDA,EAAAA,IAAC,MAAA,CAAI,UAAU,YACZ,SAAAuF,EAAc,gBAAgB,IAAI,CAACrE,EAAO2C,IACzC3D,OAAC,MAAA,CAAgB,UAAU,6BACzB,SAAA,CAAAF,MAAC,OAAI,UAAW,6BACdkB,EAAM,SAAW,YAAc,eAC/BA,EAAM,SAAW,aAAe,cAChCA,EAAM,SAAW,YAAc,gBAC/B,aACF,GAAI,EACJhB,EAAAA,KAAC,MAAA,CAAI,UAAU,SACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,sBACb,SAAAkB,EAAM,OAAO,QAAQ,IAAK,GAAG,CAAA,CAChC,QACC,OAAA,CAAK,UAAU,wBACb,SAAA8F,EAAW9F,EAAM,SAAS,CAAA,CAC7B,CAAA,EACF,EACCA,EAAM,OACLlB,EAAAA,IAAC,KAAE,UAAU,6BAA8B,WAAM,MAAM,EAExDkB,EAAM,UACLhB,OAAC,IAAA,CAAE,UAAU,6BACV,SAAA,CAAAgB,EAAM,SAAS,SAAS,QAAQ,CAAC,EAAE,KAAGA,EAAM,SAAS,UAAU,QAAQ,CAAC,CAAA,CAAA,CAC3E,CAAA,CAAA,CAEJ,CAAA,CAAA,EAxBQ2C,CAyBV,CACD,CAAA,CACH,CAAA,CAAA,CACF,CAAA,EACF,QAID,MAAA,CAAI,UAAU,qBACb,SAAA3D,EAAAA,KAAC,MAAA,CAAI,UAAU,4CACb,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,mBAAgB,SAC/C,OAAA,CAAK,UAAW,qBAAqBmF,EAAa,iBAAmB,eAAe,GACnF,SAAA,CAAAnF,MAAC,OAAI,UAAW,6BAA6BmF,EAAa,eAAiB,aAAa,GAAI,EAC3FA,EAAa,SAAW,UAAA,CAAA,CAC3B,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,CAEJ,CCzYA,SAAwBmC,IAAqB,CAC3C,KAAM,CAACC,EAAUC,CAAW,EAAIjI,EAAAA,SAAoB,CAAA,CAAE,EAChD,CAACkI,EAAYC,CAAa,EAAInI,EAAAA,SAAS,EAAE,EACzC,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAI,EAE3CG,EAAAA,UAAU,IAAM,CAEd,MAAMiI,EAA0B,CAC9B,CACE,GAAI,IACJ,OAAQ,iBACR,QAAS,4CACT,UAAW,IAAI,KAAK,KAAK,MAAQ,GAAM,EAAE,YAAA,EACzC,KAAM,UAAA,EAER,CACE,GAAI,IACJ,OAAQ,MACR,QAAS,gCACT,UAAW,IAAI,KAAK,KAAK,MAAQ,IAAM,EAAE,YAAA,EACzC,KAAM,MAAA,EAER,CACE,GAAI,IACJ,OAAQ,iBACR,QAAS,kDACT,UAAW,IAAI,KAAK,KAAK,MAAQ,IAAM,EAAE,YAAA,EACzC,KAAM,UAAA,CACR,EAGFH,EAAYG,CAAY,EACxBlI,EAAW,EAAK,CAClB,EAAG,CAAA,CAAE,EAEL,MAAMmI,EAAc,IAAM,CACxB,GAAI,CAACH,EAAW,OAAQ,OAExB,MAAMzD,EAAmB,CACvB,GAAI,KAAK,IAAA,EAAM,SAAA,EACf,OAAQ,MACR,QAASyD,EACT,UAAW,IAAI,KAAA,EAAO,YAAA,EACtB,KAAM,MAAA,EAGRD,EAAYxB,GAAQ,CAAC,GAAGA,EAAMhC,CAAO,CAAC,EACtC0D,EAAc,EAAE,EAGhB,WAAW,IAAM,CACf,MAAM9H,EAAoB,CACxB,IAAK,KAAK,IAAA,EAAQ,GAAG,SAAA,EACrB,OAAQ,iBACR,QAAS,mCACT,UAAW,IAAI,KAAA,EAAO,YAAA,EACtB,KAAM,UAAA,EAER4H,EAAYxB,GAAQ,CAAC,GAAGA,EAAMpG,CAAQ,CAAC,CACzC,EAAG,GAAI,CACT,EAEA,OAAIJ,EACKQ,EAAAA,IAAC,MAAA,CAAI,UAAU,MAAM,SAAA,kBAAe,EAI3CE,EAAAA,KAACC,EAAA,CAAK,UAAU,cACd,SAAA,CAAAH,EAAAA,IAACI,GAAW,UAAU,OACpB,SAAAF,EAAAA,KAACG,EAAA,CAAU,UAAU,0BACnB,SAAA,CAAAL,EAAAA,IAAC6H,GAAA,CAAc,UAAU,SAAA,CAAU,EAAE,kBAAA,CAAA,CAEvC,CAAA,CACF,EACA3H,EAAAA,KAACK,EAAA,CAAY,UAAU,uBACrB,SAAA,CAAAP,MAAC,OAAI,UAAU,wCACZ,SAAAuH,EAAS,IAAKvD,GACbhE,EAAAA,IAAC,MAAA,CAEC,UAAW,QAAQgE,EAAQ,OAAS,OAAS,cAAgB,eAAe,GAE5E,SAAA9D,EAAAA,KAAC,MAAA,CACC,UAAW,2BACT8D,EAAQ,OAAS,OACb,yBACA,2BACN,GAEA,SAAA,CAAAhE,EAAAA,IAAC,IAAA,CAAE,UAAU,sBAAuB,SAAAgE,EAAQ,OAAO,EACnDhE,EAAAA,IAAC,IAAA,CAAE,UAAU,UAAW,WAAQ,QAAQ,EACxCA,EAAAA,IAAC,IAAA,CAAE,UAAU,0BACV,SAAA,IAAI,KAAKgE,EAAQ,SAAS,EAAE,mBAAA,CAAmB,CAClD,CAAA,CAAA,CAAA,CACF,EAfKA,EAAQ,EAAA,CAiBhB,EACH,EACA9D,EAAAA,KAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAF,EAAAA,IAAC8H,GAAA,CACC,MAAOL,EACP,SAAWM,GAAML,EAAcK,EAAE,OAAO,KAAK,EAC7C,YAAY,oBACZ,WAAaA,GAAMA,EAAE,MAAQ,SAAWH,EAAA,EACxC,UAAU,QAAA,CAAA,EAEZ5H,EAAAA,IAACgI,EAAA,CAAO,QAASJ,EAAa,KAAK,OACjC,SAAA5H,EAAAA,IAACiI,GAAA,CAAK,UAAU,SAAA,CAAU,CAAA,CAC5B,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,CC/GA,SAAwBC,IAAuB,CAC7C,KAAM,CAAA,CAAGC,CAAW,EAAIC,GAAA,EAClB,CAAE,KAAAnD,CAAA,EAASC,EAAA,EACX,CAACmD,EAAiBC,CAAkB,EAAI/I,EAAAA,SAAiB,WAAW,EACpE,CAACgJ,EAAkBC,CAAmB,EAAIjJ,EAAAA,SAAiB,WAAW,EACtE,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAI,EACrC,CAACkJ,EAAWC,CAAY,EAAInJ,EAAAA,SAAc,IAAI,EAC9C,CAACoJ,EAAcC,CAAe,EAAIrJ,EAAAA,SAAgB,CAAA,CAAE,EACpD,CAACsJ,EAAcC,CAAe,EAAIvJ,EAAAA,SAAgB,CAAA,CAAE,EACpD,CAACwJ,EAAeC,CAAgB,EAAIzJ,EAAAA,SAAc,IAAI,EACtD,CAAC0J,EAAcC,CAAe,EAAI3J,EAAAA,SAAc,IAAI,EACpD,CAAC4J,EAAiBC,CAAkB,EAAI7J,EAAAA,SAAS,EAAK,EAGtD,CAAU,UAAA8J,EAAW,KAAAC,CAAA,EAASC,GAAA,EACjBC,GAAA,EACnB,KAAM,CAAE,eAAAC,EAAgB,IAAAC,CAA0B,EAAIC,GAAkBtB,CAAe,EACjF,CAAE,cAAAuB,EAAe,WAAAC,CAAA,EAAeC,GAAA,EAGhC,CAACC,EAAqBC,CAAsB,EAAIzK,EAAAA,SAAc,IAAI,EAExEG,EAAAA,UAAU,IAAM,CAEd,MAAMuK,EAAgB,CACpB,GAAI5B,EACJ,OAAQ,aACR,SAAU,CACR,GAAI,EACJ,KAAM,WACN,MAAO,oBACP,QAAS,2BAAA,EAEX,SAAU,CACR,GAAI,EACJ,KAAM,wBACN,MAAO,oBACP,QAAS,yBAAA,EAEX,OAAQ,CACN,GAAI,EACJ,KAAM,aACN,MAAO,oBACP,QAAS,2BAAA,EAEX,MAAO,CACL,CAAE,KAAM,iBAAkB,SAAU,MAAO,MAAO,QAAA,CAAS,EAE7D,YAAa,SACb,iBAAkB,IAAI,KAAK,KAAK,MAAQ,IAAO,EAAE,YAAA,EACjD,UAAW,IAAI,KAAK,KAAK,MAAQ,IAAO,EAAE,YAAA,CAAY,EAGxDK,EAAauB,CAAa,EAC1BrB,EAAgB,CAACqB,EAAc,SAAUA,EAAc,SAAUA,EAAc,MAAM,CAAC,EACtFxK,EAAW,EAAK,EAGZ4J,GAAahB,GACfiB,EAAK,2BAA4BjB,CAAe,CAEpD,EAAG,CAACgB,EAAWhB,EAAiBiB,CAAI,CAAC,EAErC5J,EAAAA,UAAU,IAAM,CAEVkK,EAAc,OAAS,GAAK,CAACA,EAAc,CAAC,EAAE,MAChDI,EAAuB,CACrB,GAAIJ,EAAc,CAAC,EAAE,GACrB,MAAOA,EAAc,CAAC,EAAE,MACxB,QAASA,EAAc,CAAC,EAAE,QAC1B,KAAMA,EAAc,CAAC,EAAE,KACvB,UAAWA,EAAc,CAAC,EAAE,UAAU,QAAA,EACtC,QAAS,CACP,CACE,MAAO,aACP,OAAQ,IAAMzB,EAAY,cAAc,EACxC,QAAS,SAAA,CACX,CACF,CACD,CAEL,EAAG,CAACyB,EAAezB,CAAW,CAAC,EAE/B,MAAM+B,EAAuB,IAAM,CACjC1B,EAAoB,qBAAqB,CAC3C,EAEM2B,EAAyB,IAAM,CACnC3B,EAAoB,uBAAuB,CAC7C,EAEM4B,EAAmB,IAAM,QACzBzG,EAAA8E,GAAA,YAAAA,EAAW,SAAX,MAAA9E,EAAmB,QACrB,OAAO,SAAS,KAAO,OAAO8E,EAAU,OAAO,KAAK,GAExD,EAEM4B,EAAkB3H,GAAmB,CACzC,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,gCACT,IAAK,YACH,MAAO,4BACT,IAAK,aACH,MAAO,8BACT,IAAK,YACH,MAAO,kCACT,IAAK,YACH,MAAO,0BACT,QACE,MAAO,2BAAA,CAEb,EAEA,OAAIlD,QAEC,MAAA,CAAI,UAAU,2DACb,SAAAU,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,UAAU,6EAAA,CAA8E,EAC7FA,EAAAA,IAAC,IAAA,CAAE,UAAU,gBAAgB,SAAA,+BAAA,CAA6B,CAAA,CAAA,CAC5D,CAAA,CACF,EAKFE,EAAAA,KAAC,MAAA,CAAI,UAAU,sCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,iCAEb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAF,EAAAA,IAACgI,EAAA,CACC,QAAQ,QACR,KAAK,KACL,QAAS,IAAMG,EAAY,gBAAgB,EAE3C,SAAAnI,EAAAA,IAACsK,GAAA,CAAU,UAAU,SAAA,CAAU,CAAA,CAAA,SAEhC,MAAA,CACC,SAAA,CAAAtK,EAAAA,IAAC,KAAA,CAAG,UAAU,oBAAoB,SAAA,qBAAkB,EACpDA,EAAAA,IAAC,IAAA,CAAE,UAAU,wBAAwB,SAAA,iCAAA,CAA+B,CAAA,CAAA,CACtE,CAAA,EACF,EAGAA,EAAAA,IAACG,EAAA,CAAK,UAAU,OACd,SAAAH,EAAAA,IAACO,EAAA,CAAY,UAAU,MACrB,SAAAL,OAAC,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAF,MAAC,OAAI,UAAW,wBAAwBqJ,EAAY,eAAiB,YAAY,iBAAkB,QAClG,OAAA,CAAK,UAAU,sBACb,SAAAA,EAAY,YAAc,cAAA,CAC7B,CAAA,EACF,QACC/I,EAAA,CAAM,QAAQ,UAAU,UAAU,UAAU,SAAA,WAAA,CAE7C,CAAA,CAAA,CACF,EACF,EACF,EAGCmI,GACCvI,EAAAA,KAACC,EAAA,CAAK,UAAU,OACd,SAAA,CAAAH,EAAAA,IAACI,GAAW,UAAU,OACpB,SAAAF,EAAAA,KAACG,EAAA,CAAU,UAAU,8CACnB,SAAA,CAAAH,OAAC,OAAA,CAAK,SAAA,CAAA,SAAOuI,EAAU,EAAA,EAAG,EAC1BzI,MAACM,GAAM,UAAW+J,EAAe5B,EAAU,MAAM,EAC9C,WAAU,MAAA,CACb,CAAA,CAAA,CACF,CAAA,CACF,QACClI,EAAA,CAAY,UAAU,OACrB,SAAAL,EAAAA,KAAC,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,UAAO,QACtC,OAAA,CAAK,UAAU,cAAe,SAAAyI,EAAU,OAAO,IAAA,CAAK,CAAA,EACvD,EACAvI,EAAAA,KAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,WAAQ,QACvC,OAAA,CAAK,UAAU,cAAe,SAAAyI,EAAU,OAAO,OAAA,CAAQ,CAAA,EAC1D,EACAvI,EAAAA,KAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAF,EAAAA,IAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,OAAI,EACpCA,EAAAA,IAAC,OAAA,CAAK,UAAU,6BACb,YAAO,gBAAA,CACV,CAAA,EACF,EACAE,EAAAA,KAAC,MAAA,CAAI,UAAU,kBACb,SAAA,CAAAA,EAAAA,KAAC8H,EAAA,CAAO,KAAK,KAAK,QAAQ,UAAU,QAASoC,EAAkB,UAAU,SACvE,SAAA,CAAApK,EAAAA,IAACuK,GAAA,CAAM,UAAU,cAAA,CAAe,EAAE,MAAA,EAEpC,SACCvC,EAAA,CAAO,KAAK,KAAK,QAASkC,EAAsB,UAAU,SACzD,SAAA,CAAAlK,EAAAA,IAACwK,EAAA,CAAc,UAAU,cAAA,CAAe,EAAE,MAAA,CAAA,CAE5C,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EAIFtK,EAAAA,KAACuK,GAAA,CAAK,aAAa,WAAW,UAAU,SACtC,SAAA,CAAAvK,EAAAA,KAACwK,GAAA,CAAS,UAAU,0BAClB,SAAA,CAAAxK,EAAAA,KAACyK,EAAA,CAAY,MAAM,WAAW,UAAU,UACtC,SAAA,CAAA3K,EAAAA,IAACkH,EAAA,CAAO,UAAU,cAAA,CAAe,EAAE,UAAA,EAErC,EACAhH,EAAAA,KAACyK,EAAA,CAAY,MAAM,QAAQ,UAAU,UACnC,SAAA,CAAA3K,EAAAA,IAAC4K,GAAA,CAAQ,UAAU,cAAA,CAAe,EAAE,OAAA,EAEtC,EACA1K,EAAAA,KAACyK,EAAA,CAAY,MAAM,OAAO,UAAU,UAClC,SAAA,CAAA3K,EAAAA,IAACwK,EAAA,CAAc,UAAU,cAAA,CAAe,EAAE,MAAA,CAAA,CAE5C,CAAA,EACF,EAEAtK,EAAAA,KAAC2K,EAAA,CAAY,MAAM,WAAW,UAAU,iBACtC,SAAA,CAAA7K,EAAAA,IAAC8K,GAAA,CACC,eAAgBrB,EAAiB,CAC/B,SAAUA,EAAe,SACzB,UAAWA,EAAe,SAAA,EACxB,OACJ,iBAAkBhB,EAAY,CAC5B,SAAU,OACV,UAAW,MAAA,EACT,OACJ,QAASJ,CAAA,CAAA,QAGVxD,GAAA,EAAyB,EAG1B7E,EAAAA,IAACG,GACC,SAAAH,EAAAA,IAACO,EAAA,CAAY,UAAU,MACrB,SAAAL,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAF,EAAAA,IAACqH,EAAA,CAAM,UAAU,uBAAA,CAAwB,SACxC,MAAA,CACC,SAAA,CAAArH,EAAAA,IAAC,KAAA,CAAG,UAAU,cAAc,SAAA,oBAAiB,EAC7CA,EAAAA,IAAC,IAAA,CAAE,UAAU,wBACV,YAAO,sBAAA,CACV,CAAA,CAAA,CACF,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,EACF,EAEAE,EAAAA,KAAC2K,EAAA,CAAY,MAAM,QAAQ,UAAU,OACnC,SAAA,CAAA7K,EAAAA,IAACZ,GAAA,EAAsB,EAGvBc,EAAAA,KAACC,EAAA,CAAK,UAAU,OACd,SAAA,CAAAH,EAAAA,IAACI,GACC,SAAAJ,EAAAA,IAACK,EAAA,CAAU,UAAU,YAAY,0BAAc,CAAA,CACjD,EACAL,MAACO,EAAA,CACC,SAAAL,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,UAAU,sDAAA,CAAuD,EACtEE,EAAAA,KAAC,MAAA,CAAI,UAAU,UACb,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAE,UAAU,cAAc,SAAA,kBAAe,EAC1CA,EAAAA,IAAC,IAAA,CAAE,UAAU,wBACV,SAAA,IAAI,KAAKyI,GAAA,YAAAA,EAAW,SAAS,EAAE,eAAA,CAAe,CACjD,CAAA,CAAA,CACF,CAAA,EACF,EAEAvI,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,UAAU,qDAAA,CAAsD,EACrEE,EAAAA,KAAC,MAAA,CAAI,UAAU,UACb,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAE,UAAU,cAAc,SAAA,kBAAe,EAC1CE,EAAAA,KAAC,IAAA,CAAE,UAAU,wBACV,SAAA,CAAAuI,GAAA,YAAAA,EAAW,OAAO,KAAK,MAAIA,GAAA,YAAAA,EAAW,OAAO,OAAA,CAAA,CAChD,CAAA,CAAA,CACF,CAAA,EACF,EAEAvI,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,UAAU,qEAAA,CAAsE,EACrFE,EAAAA,KAAC,MAAA,CAAI,UAAU,UACb,SAAA,CAAAF,EAAAA,IAAC,IAAA,CAAE,UAAU,cAAc,SAAA,aAAU,EACrCA,EAAAA,IAAC,IAAA,CAAE,UAAU,wBAAwB,SAAA,iCAAA,CAA+B,CAAA,CAAA,CACtE,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAEAE,EAAAA,KAAC2K,EAAA,CAAY,MAAM,OAAO,UAAU,OAClC,SAAA,CAAA7K,EAAAA,IAACsH,GAAA,EAAmB,EAGpBpH,EAAAA,KAACC,EAAA,CAAK,UAAU,OACd,SAAA,CAAAH,EAAAA,IAACI,GACC,SAAAJ,EAAAA,IAACK,EAAA,CAAU,UAAU,YAAY,yBAAa,CAAA,CAChD,EACAL,MAACO,EAAA,CACC,SAAAL,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC8H,EAAA,CACC,QAAQ,UACR,UAAU,uBACV,QAASmC,EAET,SAAA,CAAAnK,EAAAA,IAACwK,EAAA,CAAc,UAAU,cAAA,CAAe,EAAE,oBAAA,CAAA,CAAA,EAG5CtK,EAAAA,KAAC8H,EAAA,CACC,QAAQ,UACR,UAAU,uBACV,QAAS,IAAMG,EAAY,UAAU,EAErC,SAAA,CAAAnI,EAAAA,IAACwK,EAAA,CAAc,UAAU,cAAA,CAAe,EAAE,iBAAA,CAAA,CAAA,CAE5C,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGAxK,EAAAA,IAAC+K,GAAA,CACC,aAAchB,EACd,QAAS,IAAM,CACbC,EAAuB,IAAI,EACvBD,GACFF,EAAWE,EAAoB,EAAE,CAErC,CAAA,CAAA,CACF,EACF,CAEJ"}