{"version":3,"file":"wallet-transactions-C0UwxRpM.js","sources":["../../src/pages/wallet-transactions.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Filter, Calendar, Download } from \"lucide-react\";\n\ninterface Transaction {\n  id: string;\n  type: string;\n  amount: number;\n  currency: string;\n  status: string;\n  description: string;\n  createdAt: string;\n}\n\ninterface TransactionResponse {\n  transactions: Transaction[];\n  pagination: {\n    currentPage: number;\n    totalPages: number;\n    totalCount: number;\n  };\n}\n\nexport default function WalletTransactionsPage() {\n  const [, setLocation] = useLocation();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filter, setFilter] = useState<string>('');\n\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      setLoading(true);\n      try {\n        const queryParams = new URLSearchParams({\n          page: currentPage.toString(),\n          limit: '10',\n          ...(filter && { type: filter })\n        });\n\n        const response = await fetch(`/api/wallet/transactions?${queryParams}`);\n        const data: TransactionResponse = await response.json();\n        \n        if (response.ok) {\n          setTransactions(data.transactions);\n        } else {\n          console.error('Failed to fetch transactions');\n        }\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTransactions();\n  }, [currentPage, filter]);\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'WALLET_FUNDING':\n        return 'ðŸ’³';\n      case 'BILL_PAYMENT':\n        return 'âš¡';\n      case 'MONEY_TRANSFER':\n        return 'ðŸ’¸';\n      default:\n        return 'ðŸ“Š';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatAmount = (amount: number, currency: string) => {\n    const symbol = currency === 'NGN' ? 'â‚¦' : currency;\n    const formattedAmount = Math.abs(amount).toLocaleString();\n    return amount < 0 ? `-${symbol}${formattedAmount}` : `+${symbol}${formattedAmount}`;\n  };\n\n  const getTransactionTypeColor = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'fuel_order':\n        return 'text-orange-600';\n      case 'toll_payment':\n        return 'text-blue-600';\n      case 'wallet_funding':\n        return 'text-green-600';\n      case 'merchant_payment':\n        return 'text-purple-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-md mx-auto bg-white min-h-screen\">\n        {/* Header */}\n        <div className=\"bg-blue-600 text-white p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setLocation('/dashboard')}\n                className=\"text-white hover:bg-white/20 mr-2\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n              <h1 className=\"text-xl font-semibold\">Transaction History</h1>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white hover:bg-white/20\"\n            >\n              <Download className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"p-4 bg-white border-b\">\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"h-4 w-4 text-gray-400\" />\n            <select\n              value={filter}\n              onChange={(e) => setFilter(e.target.value)}\n              className=\"flex-1 p-2 border rounded-lg text-sm\"\n            >\n              <option value=\"\">All Transactions</option>\n              <option value=\"WALLET_FUNDING\">Wallet Funding</option>\n              <option value=\"BILL_PAYMENT\">Bill Payments</option>\n              <option value=\"MONEY_TRANSFER\">Money Transfers</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Transactions List */}\n        <div className=\"p-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n            </div>\n          ) : transactions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-6xl mb-4\">ðŸ“Š</div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No transactions yet</h3>\n              <p className=\"text-gray-500 mb-6\">Your transaction history will appear here</p>\n              <Button onClick={() => setLocation('/wallet-fund')}>\n                Fund Your Wallet\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {transactions.map((transaction) => (\n                <Card key={transaction.id} className=\"border-l-4 border-l-blue-500\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"text-2xl\">\n                          {getTransactionIcon(transaction.type)}\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900\">\n                            {transaction.description}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">\n                            {formatDate(transaction.createdAt)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={`font-bold text-lg ${\n                          transaction.amount < 0 ? 'text-red-600' : 'text-green-600'\n                        }`}>\n                          {formatAmount(transaction.amount, transaction.currency)}\n                        </p>\n                        <Badge \n                          variant=\"secondary\" \n                          className={getStatusColor(transaction.status)}\n                        >\n                          {transaction.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Load More */}\n        {!loading && transactions.length > 0 && (\n          <div className=\"p-4\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setCurrentPage(prev => prev + 1)}\n            >\n              Load More Transactions\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":["WalletTransactionsPage","setLocation","useLocation","transactions","setTransactions","useState","loading","setLoading","currentPage","setCurrentPage","filter","setFilter","useEffect","queryParams","response","data","error","getTransactionIcon","type","getStatusColor","status","formatAmount","amount","currency","symbol","formattedAmount","formatDate","dateString","jsxs","jsx","Button","ArrowLeft","Download","Filter","e","transaction","Card","CardContent","Badge","prev"],"mappings":"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"}