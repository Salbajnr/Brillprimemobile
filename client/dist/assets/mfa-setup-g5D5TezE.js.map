{"version":3,"file":"mfa-setup-g5D5TezE.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/copy.js","../../../node_modules/lucide-react/dist/esm/icons/key.js","../../src/pages/mfa-setup.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Copy = createLucideIcon(\"Copy\", [\n  [\"rect\", { width: \"14\", height: \"14\", x: \"8\", y: \"8\", rx: \"2\", ry: \"2\", key: \"17jyea\" }],\n  [\"path\", { d: \"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\", key: \"zix9uf\" }]\n]);\n\nexport { Copy as default };\n//# sourceMappingURL=copy.js.map\n","/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Key = createLucideIcon(\"Key\", [\n  [\"path\", { d: \"m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4\", key: \"g0fldk\" }],\n  [\"path\", { d: \"m21 2-9.6 9.6\", key: \"1j0ho8\" }],\n  [\"circle\", { cx: \"7.5\", cy: \"15.5\", r: \"5.5\", key: \"yqb3hr\" }]\n]);\n\nexport { Key as default };\n//# sourceMappingURL=key.js.map\n","\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../hooks/use-auth';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Badge } from '../components/ui/badge';\nimport { \n  Shield, \n  Smartphone, \n  Mail, \n  QrCode, \n  Key, \n  CheckCircle,\n  AlertTriangle,\n  Copy,\n  Download\n} from 'lucide-react';\nimport { useToast } from '../hooks/use-toast';\nimport { useLocation } from 'wouter';\n\nconst COLORS = {\n  PRIMARY: '#4682b4',\n  SECONDARY: '#131313',\n  SUCCESS: '#10b981',\n  WARNING: '#f59e0b',\n  ERROR: '#ef4444'\n};\n\ninterface MFAStatus {\n  enabled: boolean;\n  method?: string;\n  backupCodesRemaining: number;\n  sessionVerified: boolean;\n}\n\nexport default function MFASetupPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [mfaStatus, setMfaStatus] = useState<MFAStatus | null>(null);\n  const [selectedMethod, setSelectedMethod] = useState<'SMS' | 'EMAIL' | 'TOTP' | ''>('');\n  const [phoneNumber, setPhoneNumber] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [qrCode, setQrCode] = useState<string>('');\n  const [secret, setSecret] = useState<string>('');\n  const [backupCodes, setBackupCodes] = useState<string[]>([]);\n  const [verificationToken, setVerificationToken] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const [step, setStep] = useState<'select' | 'setup' | 'verify' | 'complete'>('select');\n\n  useEffect(() => {\n    fetchMFAStatus();\n  }, []);\n\n  const fetchMFAStatus = async () => {\n    try {\n      const response = await fetch('/api/mfa/status', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setMfaStatus(data.mfa);\n        \n        if (data.mfa.enabled) {\n          setStep('complete');\n        }\n      }\n    } catch (error) {\n      console.error('Failed to fetch MFA status:', error);\n    }\n  };\n\n  const handleMFASetup = async () => {\n    if (!selectedMethod) return;\n    \n    setLoading(true);\n    try {\n      const payload: any = { method: selectedMethod };\n      \n      if (selectedMethod === 'SMS' && phoneNumber) {\n        payload.phoneNumber = phoneNumber;\n      } else if (selectedMethod === 'EMAIL' && email) {\n        payload.email = email;\n      }\n\n      const response = await fetch('/api/mfa/setup', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        if (selectedMethod === 'TOTP') {\n          setQrCode(data.qrCode);\n          setSecret(data.secret);\n        }\n        \n        setBackupCodes(data.backupCodes || []);\n        setStep('verify');\n        \n        toast({\n          title: \"MFA Setup Started\",\n          description: `${selectedMethod} MFA has been configured`,\n          variant: \"default\"\n        });\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Setup Failed\",\n        description: error.message || \"Failed to setup MFA\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMFAVerification = async () => {\n    if (!verificationToken) {\n      toast({\n        title: \"Token Required\",\n        description: \"Please enter the verification token\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/mfa/verify', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: verificationToken,\n          method: selectedMethod,\n          rememberDevice: false\n        })\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setStep('complete');\n        fetchMFAStatus();\n        \n        toast({\n          title: \"MFA Verified\",\n          description: \"Multi-factor authentication is now active\",\n          variant: \"default\"\n        });\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid verification token\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Copied to clipboard\",\n      variant: \"default\"\n    });\n  };\n\n  const downloadBackupCodes = () => {\n    const content = backupCodes.join('\\n');\n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'mfa-backup-codes.txt';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (!mfaStatus) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white p-4 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Shield className=\"h-16 w-16 mx-auto text-blue-600 mb-4\" />\n          <h1 className=\"text-3xl font-bold mb-2\" style={{ color: COLORS.SECONDARY }}>\n            Multi-Factor Authentication\n          </h1>\n          <p className=\"text-gray-600\">\n            Add an extra layer of security to your account\n          </p>\n        </div>\n\n        {/* MFA Selection Step */}\n        {step === 'select' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Choose MFA Method</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* TOTP Option */}\n              <div \n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  selectedMethod === 'TOTP' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                }`}\n                onClick={() => setSelectedMethod('TOTP')}\n              >\n                <div className=\"flex items-center\">\n                  <QrCode className=\"h-8 w-8 text-blue-600 mr-4\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Authenticator App</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Use Google Authenticator, Authy, or similar apps\n                    </p>\n                    <Badge className=\"mt-1 bg-green-100 text-green-800\">Recommended</Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* SMS Option */}\n              <div \n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  selectedMethod === 'SMS' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                }`}\n                onClick={() => setSelectedMethod('SMS')}\n              >\n                <div className=\"flex items-center\">\n                  <Smartphone className=\"h-8 w-8 text-blue-600 mr-4\" />\n                  <div>\n                    <h3 className=\"font-semibold\">SMS Text Message</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Receive codes via text message\n                    </p>\n                  </div>\n                </div>\n                {selectedMethod === 'SMS' && (\n                  <div className=\"mt-4\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      value={phoneNumber}\n                      onChange={(e) => setPhoneNumber(e.target.value)}\n                      placeholder=\"+234xxxxxxxxxx\"\n                      className=\"rounded-xl\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              {/* Email Option */}\n              <div \n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  selectedMethod === 'EMAIL' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                }`}\n                onClick={() => setSelectedMethod('EMAIL')}\n              >\n                <div className=\"flex items-center\">\n                  <Mail className=\"h-8 w-8 text-blue-600 mr-4\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Email Verification</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Receive codes via email\n                    </p>\n                  </div>\n                </div>\n                {selectedMethod === 'EMAIL' && (\n                  <div className=\"mt-4\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"your@email.com\"\n                      className=\"rounded-xl\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <Button\n                onClick={handleMFASetup}\n                disabled={loading || !selectedMethod}\n                className=\"w-full rounded-xl\"\n                style={{ backgroundColor: COLORS.PRIMARY }}\n              >\n                {loading ? \"Setting up...\" : \"Continue Setup\"}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Setup Step (TOTP QR Code) */}\n        {step === 'setup' && selectedMethod === 'TOTP' && qrCode && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Scan QR Code</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-4\">\n              <div className=\"bg-white p-4 rounded-xl inline-block\">\n                <img src={qrCode} alt=\"QR Code\" className=\"w-48 h-48\" />\n              </div>\n              \n              <div className=\"text-left space-y-2\">\n                <p className=\"text-sm font-medium\">Manual Setup Key:</p>\n                <div className=\"flex items-center space-x-2 bg-gray-100 p-3 rounded-lg\">\n                  <code className=\"flex-1 text-sm\">{secret}</code>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => copyToClipboard(secret)}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"text-sm text-gray-600 space-y-2\">\n                <p>1. Open your authenticator app</p>\n                <p>2. Scan the QR code or enter the manual key</p>\n                <p>3. Enter the 6-digit code from your app below</p>\n              </div>\n\n              <Button\n                onClick={() => setStep('verify')}\n                className=\"w-full rounded-xl\"\n                style={{ backgroundColor: COLORS.PRIMARY }}\n              >\n                I've Added the Account\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Verification Step */}\n        {step === 'verify' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Verify Setup</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <Key className=\"h-16 w-16 mx-auto text-blue-600 mb-4\" />\n                <p className=\"text-gray-600 mb-4\">\n                  Enter the verification code from your {selectedMethod.toLowerCase()}\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"token\">Verification Code</Label>\n                <Input\n                  id=\"token\"\n                  value={verificationToken}\n                  onChange={(e) => setVerificationToken(e.target.value)}\n                  placeholder=\"Enter 6-digit code\"\n                  className=\"rounded-xl text-center text-2xl tracking-widest\"\n                  maxLength={6}\n                />\n              </div>\n\n              <Button\n                onClick={handleMFAVerification}\n                disabled={loading || verificationToken.length !== 6}\n                className=\"w-full rounded-xl\"\n                style={{ backgroundColor: COLORS.PRIMARY }}\n              >\n                {loading ? \"Verifying...\" : \"Verify & Enable MFA\"}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Complete Step */}\n        {step === 'complete' && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-green-600\">\n                <CheckCircle className=\"h-6 w-6 mr-2\" />\n                MFA Enabled Successfully\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center\">\n                <p className=\"text-gray-600 mb-4\">\n                  Your account is now protected with multi-factor authentication\n                </p>\n                \n                {mfaStatus.method && (\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    Method: {mfaStatus.method}\n                  </Badge>\n                )}\n              </div>\n\n              {/* Backup Codes */}\n              {backupCodes.length > 0 && (\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n                  <div className=\"flex items-center mb-3\">\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-600 mr-2\" />\n                    <h3 className=\"font-semibold text-yellow-800\">Backup Codes</h3>\n                  </div>\n                  <p className=\"text-sm text-yellow-700 mb-3\">\n                    Save these backup codes in a secure place. You can use them to access your account if you lose access to your MFA device.\n                  </p>\n                  \n                  <div className=\"grid grid-cols-2 gap-2 mb-3\">\n                    {backupCodes.slice(0, 6).map((code, index) => (\n                      <code key={index} className=\"bg-white p-2 rounded text-sm text-center\">\n                        {code}\n                      </code>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    onClick={downloadBackupCodes}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download Backup Codes\n                  </Button>\n                </div>\n              )}\n\n              <Button\n                onClick={() => setLocation('/account-settings')}\n                className=\"w-full rounded-xl\"\n                style={{ backgroundColor: COLORS.PRIMARY }}\n              >\n                Return to Account Settings\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["Copy","createLucideIcon","Key","COLORS","MFASetupPage","user","useAuth","toast","useToast","setLocation","useLocation","mfaStatus","setMfaStatus","useState","selectedMethod","setSelectedMethod","phoneNumber","setPhoneNumber","email","setEmail","qrCode","setQrCode","secret","setSecret","backupCodes","setBackupCodes","verificationToken","setVerificationToken","loading","setLoading","step","setStep","useEffect","fetchMFAStatus","response","data","error","handleMFASetup","payload","handleMFAVerification","copyToClipboard","text","downloadBackupCodes","content","blob","url","a","jsxs","jsx","Shield","Card","CardHeader","CardTitle","CardContent","QrCode","Badge","Smartphone","Label","Input","e","Mail","Button","CheckCircle","AlertTriangle","code","index","Download"],"mappings":"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","x_google_ignoreList":[0,1]}