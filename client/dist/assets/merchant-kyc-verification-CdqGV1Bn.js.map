{"version":3,"file":"merchant-kyc-verification-CdqGV1Bn.js","sources":["../../src/components/ui/alert.tsx","../../src/pages/merchant-kyc-verification.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface AlertProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'destructive';\n}\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(\n  ({ children, className, variant = 'default', ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        role=\"alert\"\n        className={cn(\n          'relative w-full rounded-lg border p-4',\n          variant === 'default' && 'bg-blue-50 border-blue-200 text-blue-800',\n          variant === 'destructive' && 'bg-red-50 border-red-200 text-red-800',\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nAlert.displayName = 'Alert';\n\ninterface AlertDescriptionProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst AlertDescription = forwardRef<HTMLParagraphElement, AlertDescriptionProps>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn('text-sm [&_p]:leading-relaxed', className)}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nAlertDescription.displayName = 'AlertDescription';\n\nexport { Alert, AlertDescription };","\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Upload, FileText, CheckCircle, Clock, AlertCircle, Shield,\n  Building, CreditCard, User, MapPin, Phone, Mail\n} from 'lucide-react';\n\ninterface KycSubmission {\n  id: number;\n  status: 'PENDING' | 'APPROVED' | 'REJECTED';\n  submittedAt: string;\n  reviewedAt?: string;\n  rejectionReason?: string;\n  reviewNotes?: string;\n}\n\ninterface KycRequirements {\n  requiredDocuments: Array<{\n    type: string;\n    name: string;\n    description: string;\n    required: boolean;\n    formats: string[];\n    maxSize: string;\n  }>;\n  processingTime: string;\n  benefits: string[];\n}\n\nexport default function MerchantKycVerification() {\n  const [currentTab, setCurrentTab] = useState('status');\n  const [formData, setFormData] = useState({\n    businessRegistrationNumber: '',\n    taxIdentificationNumber: '',\n    businessType: '',\n    businessAddress: '',\n    businessPhone: '',\n    businessEmail: '',\n    ownerFullName: '',\n    ownerNationalId: '',\n    bankAccountNumber: '',\n    bankName: '',\n    bankAccountName: ''\n  });\n  const [uploadedFiles, setUploadedFiles] = useState<{ [key: string]: File }>({});\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const queryClient = useQueryClient();\n\n  // Fetch KYC status\n  const { data: kycStatus } = useQuery<KycSubmission>({\n    queryKey: ['merchant', 'kyc-status'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/merchant/kyc/status');\n      return response.json();\n    }\n  });\n\n  // Fetch KYC requirements\n  const { data: requirements } = useQuery<KycRequirements>({\n    queryKey: ['merchant', 'kyc-requirements'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/merchant/kyc/requirements');\n      return response.json();\n    }\n  });\n\n  // Submit KYC mutation\n  const submitKycMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await fetch('/api/merchant/kyc/submit', {\n        method: 'POST',\n        credentials: 'include',\n        body: data\n      });\n      if (!response.ok) {\n        throw new Error('Failed to submit KYC documents');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['merchant', 'kyc-status'] });\n      setCurrentTab('status');\n    }\n  });\n\n  const handleFileUpload = (documentType: string, file: File) => {\n    setUploadedFiles(prev => ({\n      ...prev,\n      [documentType]: file\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const formDataToSubmit = new FormData();\n    formDataToSubmit.append('kycData', JSON.stringify(formData));\n    \n    // Append files\n    Object.entries(uploadedFiles).forEach(([key, file]) => {\n      formDataToSubmit.append(key, file);\n    });\n\n    submitKycMutation.mutate(formDataToSubmit);\n  };\n\n  const getStatusIcon = (status?: string) => {\n    switch (status) {\n      case 'APPROVED':\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case 'REJECTED':\n        return <AlertCircle className=\"h-5 w-5 text-red-600\" />;\n      case 'PENDING':\n        return <Clock className=\"h-5 w-5 text-yellow-600\" />;\n      default:\n        return <FileText className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status?: string) => {\n    switch (status) {\n      case 'APPROVED':\n        return 'bg-green-100 text-green-800';\n      case 'REJECTED':\n        return 'bg-red-100 text-red-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const completionPercentage = () => {\n    const requiredFields = Object.keys(formData).length;\n    const filledFields = Object.values(formData).filter(value => value.trim() !== '').length;\n    const uploadedDocsCount = Object.keys(uploadedFiles).length;\n    const requiredDocsCount = requirements?.requiredDocuments.length || 0;\n    \n    return Math.round(((filledFields + uploadedDocsCount) / (requiredFields + requiredDocsCount)) * 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4 max-w-4xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-[#0b1a51] mb-2\">Merchant KYC Verification</h1>\n        <p className=\"text-gray-600\">Complete your identity verification to unlock all merchant features</p>\n      </div>\n\n      <Tabs value={currentTab} onValueChange={setCurrentTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"status\">Status</TabsTrigger>\n          <TabsTrigger value=\"submit\">Submit Documents</TabsTrigger>\n          <TabsTrigger value=\"requirements\">Requirements</TabsTrigger>\n        </TabsList>\n\n        {/* Status Tab */}\n        <TabsContent value=\"status\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Shield className=\"h-5 w-5\" />\n                <span>Verification Status</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {kycStatus ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      {getStatusIcon(kycStatus.status)}\n                      <div>\n                        <p className=\"font-medium\">Current Status</p>\n                        <p className=\"text-sm text-gray-600\">\n                          Submitted on {new Date(kycStatus.submittedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge className={getStatusColor(kycStatus.status)}>\n                      {kycStatus.status}\n                    </Badge>\n                  </div>\n\n                  {kycStatus.status === 'PENDING' && (\n                    <Alert>\n                      <Clock className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Your KYC documents are under review. This typically takes 2-3 business days.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {kycStatus.status === 'APPROVED' && (\n                    <Alert className=\"border-green-200 bg-green-50\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      <AlertDescription className=\"text-green-800\">\n                        Congratulations! Your KYC verification is complete. You now have access to all merchant features.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {kycStatus.status === 'REJECTED' && (\n                    <Alert className=\"border-red-200 bg-red-50\">\n                      <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                      <AlertDescription className=\"text-red-800\">\n                        Your KYC submission was rejected. {kycStatus.rejectionReason}\n                        {kycStatus.reviewNotes && (\n                          <div className=\"mt-2\">\n                            <strong>Review Notes:</strong> {kycStatus.reviewNotes}\n                          </div>\n                        )}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 mb-4\">No KYC submission found</p>\n                  <Button onClick={() => setCurrentTab('submit')} className=\"bg-[#4682b4] hover:bg-[#0b1a51]\">\n                    Start KYC Process\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Submit Documents Tab */}\n        <TabsContent value=\"submit\" className=\"space-y-4\">\n          {(!kycStatus || kycStatus.status === 'REJECTED') && (\n            <>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Completion Progress</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Overall Progress</span>\n                      <span>{completionPercentage()}%</span>\n                    </div>\n                    <Progress value={completionPercentage()} className=\"w-full\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Business Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Building className=\"h-5 w-5\" />\n                      <span>Business Information</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"businessRegistrationNumber\">Business Registration Number *</Label>\n                        <Input\n                          id=\"businessRegistrationNumber\"\n                          value={formData.businessRegistrationNumber}\n                          onChange={(e) => setFormData(prev => ({ ...prev, businessRegistrationNumber: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"taxIdentificationNumber\">Tax Identification Number *</Label>\n                        <Input\n                          id=\"taxIdentificationNumber\"\n                          value={formData.taxIdentificationNumber}\n                          onChange={(e) => setFormData(prev => ({ ...prev, taxIdentificationNumber: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"businessType\">Business Type *</Label>\n                        <Select \n                          value={formData.businessType} \n                          onValueChange={(value) => setFormData(prev => ({ ...prev, businessType: value }))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select business type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"SOLE_PROPRIETORSHIP\">Sole Proprietorship</SelectItem>\n                            <SelectItem value=\"PARTNERSHIP\">Partnership</SelectItem>\n                            <SelectItem value=\"LIMITED_COMPANY\">Limited Company</SelectItem>\n                            <SelectItem value=\"CORPORATION\">Corporation</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"businessPhone\">Business Phone *</Label>\n                        <Input\n                          id=\"businessPhone\"\n                          value={formData.businessPhone}\n                          onChange={(e) => setFormData(prev => ({ ...prev, businessPhone: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div className=\"md:col-span-2\">\n                        <Label htmlFor=\"businessAddress\">Business Address *</Label>\n                        <Textarea\n                          id=\"businessAddress\"\n                          value={formData.businessAddress}\n                          onChange={(e) => setFormData(prev => ({ ...prev, businessAddress: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"businessEmail\">Business Email *</Label>\n                        <Input\n                          id=\"businessEmail\"\n                          type=\"email\"\n                          value={formData.businessEmail}\n                          onChange={(e) => setFormData(prev => ({ ...prev, businessEmail: e.target.value }))}\n                          required\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Owner Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <User className=\"h-5 w-5\" />\n                      <span>Owner Information</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"ownerFullName\">Full Name *</Label>\n                        <Input\n                          id=\"ownerFullName\"\n                          value={formData.ownerFullName}\n                          onChange={(e) => setFormData(prev => ({ ...prev, ownerFullName: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"ownerNationalId\">National ID Number *</Label>\n                        <Input\n                          id=\"ownerNationalId\"\n                          value={formData.ownerNationalId}\n                          onChange={(e) => setFormData(prev => ({ ...prev, ownerNationalId: e.target.value }))}\n                          required\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Banking Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <CreditCard className=\"h-5 w-5\" />\n                      <span>Banking Information</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"bankName\">Bank Name *</Label>\n                        <Input\n                          id=\"bankName\"\n                          value={formData.bankName}\n                          onChange={(e) => setFormData(prev => ({ ...prev, bankName: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"bankAccountNumber\">Account Number *</Label>\n                        <Input\n                          id=\"bankAccountNumber\"\n                          value={formData.bankAccountNumber}\n                          onChange={(e) => setFormData(prev => ({ ...prev, bankAccountNumber: e.target.value }))}\n                          required\n                        />\n                      </div>\n                      <div className=\"md:col-span-2\">\n                        <Label htmlFor=\"bankAccountName\">Account Name *</Label>\n                        <Input\n                          id=\"bankAccountName\"\n                          value={formData.bankAccountName}\n                          onChange={(e) => setFormData(prev => ({ ...prev, bankAccountName: e.target.value }))}\n                          required\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Document Uploads */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Upload className=\"h-5 w-5\" />\n                      <span>Required Documents</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {requirements?.requiredDocuments.map((doc) => (\n                      <div key={doc.type} className=\"border border-gray-200 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div>\n                            <h4 className=\"font-medium\">{doc.name}</h4>\n                            <p className=\"text-sm text-gray-600\">{doc.description}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Formats: {doc.formats.join(', ')} | Max size: {doc.maxSize}\n                            </p>\n                          </div>\n                          <Badge variant={uploadedFiles[doc.type] ? \"default\" : \"secondary\"}>\n                            {uploadedFiles[doc.type] ? \"Uploaded\" : \"Required\"}\n                          </Badge>\n                        </div>\n                        <input\n                          type=\"file\"\n                          accept={doc.formats.map(f => f === 'PDF' ? '.pdf' : '.jpg,.jpeg,.png').join(',')}\n                          onChange={(e) => {\n                            const file = e.target.files?.[0];\n                            if (file) {\n                              handleFileUpload(doc.type, file);\n                            }\n                          }}\n                          className=\"w-full\"\n                        />\n                        {uploadedFiles[doc.type] && (\n                          <p className=\"text-sm text-green-600 mt-1\">\n                            ✓ {uploadedFiles[doc.type].name}\n                          </p>\n                        )}\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={submitKycMutation.isPending || completionPercentage() < 100}\n                    className=\"bg-[#4682b4] hover:bg-[#0b1a51]\"\n                  >\n                    {submitKycMutation.isPending ? 'Submitting...' : 'Submit KYC Documents'}\n                  </Button>\n                </div>\n              </form>\n            </>\n          )}\n\n          {kycStatus && kycStatus.status === 'PENDING' && (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Clock className=\"h-12 w-12 text-yellow-600 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">KYC Under Review</h3>\n                <p className=\"text-gray-600\">\n                  Your documents have been submitted and are currently under review.\n                  You'll be notified once the review is complete.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          {kycStatus && kycStatus.status === 'APPROVED' && (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">KYC Verified</h3>\n                <p className=\"text-gray-600\">\n                  Your identity has been successfully verified. You now have access to all merchant features.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Requirements Tab */}\n        <TabsContent value=\"requirements\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>KYC Requirements & Benefits</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-medium mb-3\">Required Documents</h4>\n                <div className=\"space-y-3\">\n                  {requirements?.requiredDocuments.map((doc) => (\n                    <div key={doc.type} className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg\">\n                      <FileText className=\"h-5 w-5 text-gray-400 mt-0.5\" />\n                      <div>\n                        <h5 className=\"font-medium\">{doc.name}</h5>\n                        <p className=\"text-sm text-gray-600\">{doc.description}</p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Accepted formats: {doc.formats.join(', ')} | Maximum size: {doc.maxSize}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-3\">Processing Time</h4>\n                <p className=\"text-gray-600\">{requirements?.processingTime}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-3\">Verification Benefits</h4>\n                <ul className=\"space-y-2\">\n                  {requirements?.benefits.map((benefit, index) => (\n                    <li key={index} className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-gray-700\">{benefit}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":["Alert","forwardRef","children","className","variant","props","ref","jsx","cn","AlertDescription","MerchantKycVerification","currentTab","setCurrentTab","useState","formData","setFormData","uploadedFiles","setUploadedFiles","uploadProgress","setUploadProgress","queryClient","useQueryClient","kycStatus","useQuery","apiRequest","requirements","submitKycMutation","useMutation","data","response","handleFileUpload","documentType","file","prev","handleSubmit","e","formDataToSubmit","key","getStatusIcon","status","CheckCircle","AlertCircle","Clock","FileText","getStatusColor","completionPercentage","requiredFields","filledFields","value","uploadedDocsCount","requiredDocsCount","jsxs","Tabs","TabsList","TabsTrigger","TabsContent","Card","CardHeader","CardTitle","Shield","CardContent","Badge","Button","Fragment","Progress","Building","Label","Input","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Textarea","User","CreditCard","Upload","doc","f","_a","benefit","index"],"mappings":"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"}