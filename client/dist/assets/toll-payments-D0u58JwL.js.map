{"version":3,"file":"toll-payments-D0u58JwL.js","sources":["../../src/pages/toll-payments.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, MapPin, Car, Clock, CreditCard, Navigation, Ticket, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\n\ninterface VehicleType {\n  id: string;\n  name: string;\n  icon: string;\n  description: string;\n}\n\ninterface TollGate {\n  id: string;\n  name: string;\n  location: string;\n  highway: string;\n  distance: number;\n  pricePerVehicle: {\n    car: number;\n    suv: number;\n    truck: number;\n    motorcycle: number;\n  };\n  operatingHours: string;\n  isOpen: boolean;\n  estimatedTime: string;\n  paymentMethods: string[];\n  trafficStatus: 'light' | 'moderate' | 'heavy';\n  queueTime: string;\n}\n\ninterface TollTransaction {\n  id: string;\n  tollGateId: string;\n  vehicleType: string;\n  amount: number;\n  timestamp: string;\n  status: 'pending' | 'completed' | 'failed';\n  qrCode: string;\n  paymentMethod?: string;\n  reference?: string;\n}\n\nexport default function TollPayments() {\n  const [, setLocation] = useLocation();\n  const [selectedVehicle, setSelectedVehicle] = useState<string>(\"car\");\n  const [selectedTollGate, setSelectedTollGate] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTransactions, setActiveTransactions] = useState<TollTransaction[]>([\n    {\n      id: \"TP-2024-0001\",\n      tollGateId: \"lagos-ibadan-1\",\n      vehicleType: \"car\",\n      amount: 600,\n      timestamp: \"2024-01-15 14:30\",\n      status: \"completed\",\n      qrCode: \"QR123456789\"\n    }\n  ]);\n\n  const vehicleTypes: VehicleType[] = [\n    {\n      id: \"motorcycle\",\n      name: \"Motorcycle\", \n      icon: \"üèçÔ∏è\",\n      description: \"2-wheeled vehicles\"\n    },\n    {\n      id: \"car\",\n      name: \"Car\",\n      icon: \"üöó\", \n      description: \"Private cars & sedans\"\n    },\n    {\n      id: \"suv\",\n      name: \"SUV/Bus\",\n      icon: \"üöô\",\n      description: \"SUVs, vans & small buses\"\n    },\n    {\n      id: \"truck\",\n      name: \"Truck\",\n      icon: \"üöõ\",\n      description: \"Heavy vehicles & trailers\"\n    }\n  ];\n\n  const [tollGatesData, setTollGatesData] = useState<TollGate[]>([\n    {\n      id: \"lagos-ibadan-1\",\n      name: \"Lagos-Ibadan Toll Plaza\",\n      location: \"Km 20, Lagos-Ibadan Expressway\",\n      highway: \"Lagos-Ibadan Expressway\",\n      distance: 18.5,\n      pricePerVehicle: {\n        motorcycle: 300,\n        car: 600,\n        suv: 1000,\n        truck: 1500\n      },\n      operatingHours: \"24 hours\",\n      isOpen: true,\n      estimatedTime: \"22 mins\",\n      paymentMethods: [\"Cash\", \"Card\", \"Mobile\"],\n      trafficStatus: \"moderate\",\n      queueTime: \"5-10 mins\"\n    },\n    {\n      id: \"abuja-kaduna-1\",\n      name: \"Abuja-Kaduna Toll Gate\",\n      location: \"Km 15, Abuja-Kaduna Highway\",\n      highway: \"Abuja-Kaduna Highway\", \n      distance: 28.2,\n      pricePerVehicle: {\n        motorcycle: 200,\n        car: 400,\n        suv: 700,\n        truck: 1200\n      },\n      operatingHours: \"24 hours\",\n      isOpen: true,\n      estimatedTime: \"35 mins\",\n      paymentMethods: [\"Cash\", \"Card\", \"Mobile\"],\n      trafficStatus: \"light\",\n      queueTime: \"2-5 mins\"\n    },\n    {\n      id: \"lekki-toll\",\n      name: \"Lekki Toll Gate\",\n      location: \"Lekki-Epe Expressway, Lagos\",\n      highway: \"Lekki-Epe Expressway\",\n      distance: 12.1,\n      pricePerVehicle: {\n        motorcycle: 150,\n        car: 300,\n        suv: 500,\n        truck: 800\n      },\n      operatingHours: \"5:00 AM - 11:00 PM\",\n      isOpen: true,\n      estimatedTime: \"18 mins\",\n      paymentMethods: [\"Card\", \"Mobile\"],\n      trafficStatus: \"heavy\",\n      queueTime: \"15-20 mins\"\n    },\n    {\n      id: \"kara-bridge\",\n      name: \"Kara Bridge Toll\",\n      location: \"Kara, Lagos-Ibadan Expressway\",\n      highway: \"Lagos-Ibadan Expressway\",\n      distance: 25.8,\n      pricePerVehicle: {\n        motorcycle: 250,\n        car: 500,\n        suv: 800,\n        truck: 1300\n      },\n      operatingHours: \"24 hours\",\n      isOpen: false,\n      estimatedTime: \"32 mins\",\n      paymentMethods: [\"Cash\", \"Card\"],\n      trafficStatus: \"light\",\n      queueTime: \"N/A\"\n    }\n  ]);\n\n  const filteredTollGates = tollGatesData.filter(gate =>\n    gate.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    gate.highway.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    gate.location.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const handleTollSelection = (tollGate: TollGate) => {\n    setSelectedTollGate(tollGate);\n  };\n\n  const handlePurchase = async () => {\n    if (selectedTollGate) {\n      const amount = selectedTollGate?.pricePerVehicle[selectedVehicle as keyof TollGate['pricePerVehicle']];\n\n      try {\n        const response = await fetch('/api/toll/payment', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            tollGateId: selectedTollGate.id,\n            vehicleType: selectedVehicle,\n            amount: amount,\n            paymentMethod: 'wallet'\n          }),\n          credentials: 'include'\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          if (result.success) {\n            const newTransaction: TollTransaction = {\n              id: result.transaction.id,\n              tollGateId: selectedTollGate.id,\n              vehicleType: selectedVehicle,\n              amount: amount || 0,\n              timestamp: new Date().toISOString(),\n              status: 'completed',\n              qrCode: result.qrCode,\n              paymentMethod: 'wallet',\n              reference: result.transaction.reference\n            };\n\n            setActiveTransactions(prev => [...prev, newTransaction]);\n            setLocation(`/toll-payment-success?transactionId=${result.transaction.id}&qrCode=${result.qrCode}`);\n          } else {\n             setModalData({\n              isOpen: true,\n              type: \"error\",\n              title: \"Payment Failed\",\n              message: result.message || \"An error occurred during payment processing.\"\n            });\n          }\n        } else {\n          console.error('Failed to process toll payment');\n          setModalData({\n            isOpen: true,\n            type: \"error\",\n            title: \"Payment Error\",\n            message: \"Server error. Please try again later.\"\n          });\n        }\n      } catch (error) {\n        console.error('Error processing toll payment:', error);\n        setModalData({\n          isOpen: true,\n          type: \"error\",\n          title: \"Network Error\",\n          message: \"Failed to connect. Check your internet connection.\"\n        });\n      }\n    }\n  };\n\n  const getTrafficStatusColor = (status: string) => {\n    switch (status) {\n      case 'light': return 'text-green-600';\n      case 'moderate': return 'text-yellow-600';\n      case 'heavy': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getTrafficStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'light': return 'bg-green-100 text-green-800';\n      case 'moderate': return 'bg-yellow-100 text-yellow-800';\n      case 'heavy': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTransactionStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'pending': return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      case 'failed': return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 w-full max-w-sm sm:max-w-md md:max-w-lg lg:max-w-xl xl:max-w-2xl mx-auto px-2 sm:px-4\">\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/consumer-home\")}\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-lg font-semibold text-[#131313]\">Electronic Toll Payments</h1>\n              <p className=\"text-sm text-gray-600\">Pay toll fees in advance</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-4 pb-4\">\n          <Input\n            placeholder=\"Search toll gates or highways...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"border-[#4682b4]/30 focus:border-[#4682b4]\"\n          />\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {activeTransactions.length > 0 && (\n          <Card>\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-semibold text-[#131313] mb-3\">Recent Transactions</h3>\n              <div className=\"space-y-3\">\n                {activeTransactions.slice(0, 3).map((transaction) => {\n                  const gate = tollGatesData.find(g => g.id === transaction.tollGateId);\n                  return (\n                    <div key={transaction.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        {getTransactionStatusIcon(transaction.status)}\n                        <div>\n                          <p className=\"font-medium text-sm\">{gate?.name}</p>\n                          <p className=\"text-xs text-gray-600\">{transaction.timestamp}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-sm\">{formatCurrency(transaction.amount)}</p>\n                        <Badge variant=\"secondary\" className={`text-xs ${\n                          transaction.status === 'completed' ? 'bg-green-100 text-green-800' :\n                          transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                          'bg-red-100 text-red-800'\n                        }`}>\n                          {transaction.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <Label className=\"text-sm font-medium text-[#131313] mb-3 block\">Select Vehicle Type</Label>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {vehicleTypes.map((vehicle) => (\n                <button\n                  key={vehicle.id}\n                  onClick={() => setSelectedVehicle(vehicle.id)}\n                  className={`p-3 rounded-lg border text-left transition-colors ${\n                    selectedVehicle === vehicle.id\n                      ? \"border-[#4682b4] bg-[#4682b4]/5\"\n                      : \"border-gray-200 hover:border-gray-300\"\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <span className=\"text-lg\">{vehicle.icon}</span>\n                    <span className=\"font-medium text-sm\">{vehicle.name}</span>\n                  </div>\n                  <p className=\"text-xs text-gray-600\">{vehicle.description}</p>\n                </button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"space-y-4\">\n          <h2 className=\"font-semibold text-[#131313]\">Available Toll Gates</h2>\n\n          {filteredTollGates.map((gate) => (\n            <Card\n              key={gate.id}\n              className={`cursor-pointer transition-all hover:shadow-md ${\n                selectedTollGate?.id === gate.id ? \"ring-2 ring-[#4682b4] ring-opacity-50\" : \"\"\n              } ${!gate.isOpen ? \"opacity-60\" : \"\"}`}\n              onClick={() => gate.isOpen && handleTollSelection(gate)}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-[#131313] mb-1\">{gate.name}</h3>\n                      <p className=\"text-sm text-gray-600 mb-2\">{gate.location}</p>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                        <div className=\"flex items-center space-x-1\">\n                          <MapPin className=\"w-3 h-3\" />\n                          <span>{gate.distance} km away</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          <span>{gate.estimatedTime}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={gate.isOpen ? \"default\" : \"secondary\"}>\n                        {gate.isOpen ? \"Open\" : \"Closed\"}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={getTrafficStatusBadgeClass(gate.trafficStatus)}>\n                        {gate.trafficStatus} traffic\n                      </Badge>\n                      <span className=\"text-sm text-gray-600\">Queue: {gate.queueTime}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-bold text-[#4682b4]\">\n                        {formatCurrency(gate.pricePerVehicle[selectedVehicle as keyof TollGate['pricePerVehicle']])}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">{gate.operatingHours}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-gray-600\">Payment:</span>\n                    {gate.paymentMethods.map((method) => (\n                      <Badge key={method} variant=\"outline\" className=\"text-xs\">\n                        {method}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {selectedTollGate && (\n          <Card className=\"border-[#4682b4]\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-[#131313] mb-4\">Purchase Summary</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Toll Gate:</span>\n                  <span className=\"font-medium\">{selectedTollGate?.name}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Vehicle Type:</span>\n                  <span className=\"font-medium\">\n                    {vehicleTypes.find(v => v.id === selectedVehicle)?.name}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Distance:</span>\n                  <span className=\"font-medium\">{selectedTollGate?.distance} km</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Current Traffic:</span>\n                  <Badge className={getTrafficStatusBadgeClass(selectedTollGate?.trafficStatus || 'light')}>\n                    {selectedTollGate?.trafficStatus} traffic\n                  </Badge>\n                </div>\n                <hr />\n                <div className=\"flex justify-between font-semibold text-lg\">\n                  <span>Total Amount:</span>\n                  <span className=\"text-[#4682b4]\">\n                    {selectedTollGate && formatCurrency(\n                      selectedTollGate!.pricePerVehicle[selectedVehicle as keyof TollGate['pricePerVehicle']]\n                    )}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {filteredTollGates.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Car className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No toll gates found</h3>\n            <p className=\"text-gray-500\">Try adjusting your search or check back later</p>\n          </div>\n        )}\n      </div>\n\n      {selectedTollGate && (\n        <div className=\"fixed bottom-0 left-0 right-0 p-4 bg-white border-t\">\n          <Button\n            className=\"w-full h-12 bg-[#4682b4] hover:bg-[#0b1a51]\"\n            onClick={handlePurchase}\n          >\n            <Ticket className=\"w-5 h-5 mr-2\" />\n            Purchase Toll Pass\n          </Button>\n        </div>\n      )}\n\n      <Dialog open={modalData.isOpen} onOpenChange={(open) => setModalData({ ...modalData, isOpen: open })}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {modalData.type === \"success\" ? (\n                <div className=\"flex items-center text-green-600\">\n                  <CheckCircle className=\"w-6 h-6 mr-2\" /> {modalData.title}\n                </div>\n              ) : (\n                <div className=\"flex items-center text-red-600\">\n                  <AlertCircle className=\"w-6 h-6 mr-2\" /> {modalData.title}\n                </div>\n              )}\n            </DialogTitle>\n          </DialogHeader>\n          <DialogDescription>{modalData.message}</DialogDescription>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}"],"names":["TollPayments","setLocation","useLocation","selectedVehicle","setSelectedVehicle","useState","selectedTollGate","setSelectedTollGate","searchQuery","setSearchQuery","activeTransactions","setActiveTransactions","vehicleTypes","tollGatesData","setTollGatesData","filteredTollGates","gate","formatCurrency","amount","handleTollSelection","tollGate","handlePurchase","response","result","newTransaction","prev","error","getTrafficStatusBadgeClass","status","getTransactionStatusIcon","jsx","CheckCircle","Clock","AlertCircle","jsxs","Button","ArrowLeft","Input","e","Card","CardContent","transaction","g","Badge","Label","vehicle","MapPin","method","_a","v","Car","Ticket","Dialog","open","DialogContent","DialogHeader","DialogTitle","DialogDescription"],"mappings":"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"}