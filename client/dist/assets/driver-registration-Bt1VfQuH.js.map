{"version":3,"file":"driver-registration-Bt1VfQuH.js","sources":["../../../node_modules/@radix-ui/react-checkbox/dist/index.mjs","../../src/components/ui/checkbox.tsx","../../../node_modules/react-hook-form/dist/index.esm.mjs","../../src/components/ui/form.tsx","../../../node_modules/@hookform/resolvers/dist/resolvers.mjs","../../../node_modules/zod/v4/core/core.js","../../../node_modules/zod/v4/core/util.js","../../../node_modules/zod/v4/core/errors.js","../../../node_modules/zod/v4/core/parse.js","../../../node_modules/@hookform/resolvers/zod/dist/zod.mjs","../../src/pages/driver-registration.tsx"],"sourcesContent":["\"use client\";\n\n// src/checkbox.tsx\nimport * as React from \"react\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar CHECKBOX_NAME = \"Checkbox\";\nvar [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\nvar [CheckboxProviderImpl, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);\nfunction CheckboxProvider(props) {\n  const {\n    __scopeCheckbox,\n    checked: checkedProp,\n    children,\n    defaultChecked,\n    disabled,\n    form,\n    name,\n    onCheckedChange,\n    required,\n    value = \"on\",\n    // @ts-expect-error\n    internal_do_not_use_render\n  } = props;\n  const [checked, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultChecked ?? false,\n    onChange: onCheckedChange,\n    caller: CHECKBOX_NAME\n  });\n  const [control, setControl] = React.useState(null);\n  const [bubbleInput, setBubbleInput] = React.useState(null);\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = control ? !!form || !!control.closest(\"form\") : (\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    true\n  );\n  const context = {\n    checked,\n    disabled,\n    setChecked,\n    control,\n    setControl,\n    name,\n    form,\n    value,\n    hasConsumerStoppedPropagationRef,\n    required,\n    defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked,\n    isFormControl,\n    bubbleInput,\n    setBubbleInput\n  };\n  return /* @__PURE__ */ jsx(\n    CheckboxProviderImpl,\n    {\n      scope: __scopeCheckbox,\n      ...context,\n      children: isFunction(internal_do_not_use_render) ? internal_do_not_use_render(context) : children\n    }\n  );\n}\nvar TRIGGER_NAME = \"CheckboxTrigger\";\nvar CheckboxTrigger = React.forwardRef(\n  ({ __scopeCheckbox, onKeyDown, onClick, ...checkboxProps }, forwardedRef) => {\n    const {\n      control,\n      value,\n      disabled,\n      checked,\n      required,\n      setControl,\n      setChecked,\n      hasConsumerStoppedPropagationRef,\n      isFormControl,\n      bubbleInput\n    } = useCheckboxContext(TRIGGER_NAME, __scopeCheckbox);\n    const composedRefs = useComposedRefs(forwardedRef, setControl);\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form = control?.form;\n      if (form) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form.addEventListener(\"reset\", reset);\n        return () => form.removeEventListener(\"reset\", reset);\n      }\n    }, [control, setChecked]);\n    return /* @__PURE__ */ jsx(\n      Primitive.button,\n      {\n        type: \"button\",\n        role: \"checkbox\",\n        \"aria-checked\": isIndeterminate(checked) ? \"mixed\" : checked,\n        \"aria-required\": required,\n        \"data-state\": getState(checked),\n        \"data-disabled\": disabled ? \"\" : void 0,\n        disabled,\n        value,\n        ...checkboxProps,\n        ref: composedRefs,\n        onKeyDown: composeEventHandlers(onKeyDown, (event) => {\n          if (event.key === \"Enter\") event.preventDefault();\n        }),\n        onClick: composeEventHandlers(onClick, (event) => {\n          setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);\n          if (bubbleInput && isFormControl) {\n            hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n            if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n          }\n        })\n      }\n    );\n  }\n);\nCheckboxTrigger.displayName = TRIGGER_NAME;\nvar Checkbox = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked,\n      defaultChecked,\n      required,\n      disabled,\n      value,\n      onCheckedChange,\n      form,\n      ...checkboxProps\n    } = props;\n    return /* @__PURE__ */ jsx(\n      CheckboxProvider,\n      {\n        __scopeCheckbox,\n        checked,\n        defaultChecked,\n        disabled,\n        required,\n        onCheckedChange,\n        name,\n        form,\n        value,\n        internal_do_not_use_render: ({ isFormControl }) => /* @__PURE__ */ jsxs(Fragment, { children: [\n          /* @__PURE__ */ jsx(\n            CheckboxTrigger,\n            {\n              ...checkboxProps,\n              ref: forwardedRef,\n              __scopeCheckbox\n            }\n          ),\n          isFormControl && /* @__PURE__ */ jsx(\n            CheckboxBubbleInput,\n            {\n              __scopeCheckbox\n            }\n          )\n        ] })\n      }\n    );\n  }\n);\nCheckbox.displayName = CHECKBOX_NAME;\nvar INDICATOR_NAME = \"CheckboxIndicator\";\nvar CheckboxIndicator = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return /* @__PURE__ */ jsx(\n      Presence,\n      {\n        present: forceMount || isIndeterminate(context.checked) || context.checked === true,\n        children: /* @__PURE__ */ jsx(\n          Primitive.span,\n          {\n            \"data-state\": getState(context.checked),\n            \"data-disabled\": context.disabled ? \"\" : void 0,\n            ...indicatorProps,\n            ref: forwardedRef,\n            style: { pointerEvents: \"none\", ...props.style }\n          }\n        )\n      }\n    );\n  }\n);\nCheckboxIndicator.displayName = INDICATOR_NAME;\nvar BUBBLE_INPUT_NAME = \"CheckboxBubbleInput\";\nvar CheckboxBubbleInput = React.forwardRef(\n  ({ __scopeCheckbox, ...props }, forwardedRef) => {\n    const {\n      control,\n      hasConsumerStoppedPropagationRef,\n      checked,\n      defaultChecked,\n      required,\n      disabled,\n      name,\n      value,\n      form,\n      bubbleInput,\n      setBubbleInput\n    } = useCheckboxContext(BUBBLE_INPUT_NAME, __scopeCheckbox);\n    const composedRefs = useComposedRefs(forwardedRef, setBubbleInput);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n    React.useEffect(() => {\n      const input = bubbleInput;\n      if (!input) return;\n      const inputProto = window.HTMLInputElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        inputProto,\n        \"checked\"\n      );\n      const setChecked = descriptor.set;\n      const bubbles = !hasConsumerStoppedPropagationRef.current;\n      if (prevChecked !== checked && setChecked) {\n        const event = new Event(\"click\", { bubbles });\n        input.indeterminate = isIndeterminate(checked);\n        setChecked.call(input, isIndeterminate(checked) ? false : checked);\n        input.dispatchEvent(event);\n      }\n    }, [bubbleInput, prevChecked, checked, hasConsumerStoppedPropagationRef]);\n    const defaultCheckedRef = React.useRef(isIndeterminate(checked) ? false : checked);\n    return /* @__PURE__ */ jsx(\n      Primitive.input,\n      {\n        type: \"checkbox\",\n        \"aria-hidden\": true,\n        defaultChecked: defaultChecked ?? defaultCheckedRef.current,\n        required,\n        disabled,\n        name,\n        value,\n        form,\n        ...props,\n        tabIndex: -1,\n        ref: composedRefs,\n        style: {\n          ...props.style,\n          ...controlSize,\n          position: \"absolute\",\n          pointerEvents: \"none\",\n          opacity: 0,\n          margin: 0,\n          // We transform because the input is absolutely positioned but we have\n          // rendered it **after** the button. This pulls it back to sit on top\n          // of the button.\n          transform: \"translateX(-100%)\"\n        }\n      }\n    );\n  }\n);\nCheckboxBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction isIndeterminate(checked) {\n  return checked === \"indeterminate\";\n}\nfunction getState(checked) {\n  return isIndeterminate(checked) ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\";\n}\nexport {\n  Checkbox,\n  CheckboxIndicator,\n  CheckboxIndicator as Indicator,\n  Checkbox as Root,\n  createCheckboxScope,\n  CheckboxBubbleInput as unstable_BubbleInput,\n  CheckboxBubbleInput as unstable_CheckboxBubbleInput,\n  CheckboxProvider as unstable_CheckboxProvider,\n  CheckboxTrigger as unstable_CheckboxTrigger,\n  CheckboxProvider as unstable_Provider,\n  CheckboxTrigger as unstable_Trigger\n};\n//# sourceMappingURL=index.mjs.map\n","\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : Object.create(Object.getPrototypeOf(data));\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar isUndefined = (val) => val === undefined;\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = (isKey(path) ? [path] : stringToPath(path)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\nHookFormContext.displayName = 'HookFormContext';\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [name, disabled, exact]);\n    React.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\n            get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2, _internal_visited = new WeakSet()) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    if (_internal_visited.has(object1) || _internal_visited.has(object2)) {\n        return true;\n    }\n    _internal_visited.add(object1);\n    _internal_visited.add(object2);\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2, _internal_visited)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, compute, } = props || {};\n    const _defaultValue = React.useRef(defaultValue);\n    const _compute = React.useRef(compute);\n    const _computeFormValues = React.useRef(undefined);\n    _compute.current = compute;\n    const defaultValueMemo = React.useMemo(() => control._getWatch(name, _defaultValue.current), [control, name]);\n    const [value, updateValue] = React.useState(_compute.current ? _compute.current(defaultValueMemo) : defaultValueMemo);\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => {\n            if (!disabled) {\n                const formValues = generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current);\n                if (_compute.current) {\n                    const computedFormValues = _compute.current(formValues);\n                    if (!deepEqual(computedFormValues, _computeFormValues.current)) {\n                        updateValue(computedFormValues);\n                        _computeFormValues.current = computedFormValues;\n                    }\n                }\n                else {\n                    updateValue(formValues);\n                }\n            }\n        },\n    }), [control, disabled, name, exact]);\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister, defaultValue, } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const defaultValueMemo = React.useMemo(() => get(control._formValues, name, get(control._defaultValues, name, defaultValue)), [control, name, defaultValue]);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: defaultValueMemo,\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React.useRef(props);\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    _props.current = props;\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus && elm.focus(),\n                select: () => elm.select && elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType && encType !== 'multipart/form-data'\n                                ? { 'Content-Type': encType }\n                                : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        if (foundError && foundError.root && foundError.root.type) {\n            return {\n                name: `${fieldName}.root`,\n                error: foundError.root,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isReady: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.forEach((checkboxRef) => {\n                            if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\n                                if (Array.isArray(fieldValue)) {\n                                    checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);\n                                }\n                                else {\n                                    checkboxRef.checked =\n                                        fieldValue === checkboxRef.value || !!fieldValue;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            if (!value.hasOwnProperty(fieldKey)) {\n                return;\n            }\n            const fieldValue = value[fieldKey];\n            const fieldName = name + '.' + fieldKey;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState, name });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        const validationModeBeforeSubmit = getValidationModes(_options.mode);\n        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                if (!target || !target.readOnly) {\n                    field._f.onBlur && field._f.onBlur(event);\n                    delayErrorCallback && delayErrorCallback(0);\n                }\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => 'values' in payload &&\n                name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                    defaultValues: _defaultValues,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = cloneObject(values);\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                unset(fieldValues, name);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (keepStateOptions.keepFieldsRef) {\n                    for (const fieldName of _names.mount) {\n                        setValue(fieldName, get(values, fieldName));\n                    }\n                }\n                else {\n                    _fields = {};\n                }\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n            defaultValues: _defaultValues,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _focusError,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _actioned = React.useRef(false);\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    React.useMemo(() => rules &&\n        control.register(name, rules), [control, rules, name]);\n    useIsomorphicLayoutEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === name || !fieldArrayName) {\n                const fieldValues = get(values, name);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control, name]);\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        isReady: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        if (props.formControl) {\n            _formControl.current = {\n                ...props.formControl,\n                formState,\n            };\n            if (props.defaultValues && !isFunction(props.defaultValues)) {\n                props.formControl.reset(props.defaultValues, props.resetOptions);\n            }\n        }\n        else {\n            const { formControl, ...rest } = createFormControl(props);\n            _formControl.current = {\n                ...rest,\n                formState,\n            };\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useIsomorphicLayoutEffect(() => {\n        const sub = control._subscribe({\n            formState: control._proxyFormState,\n            callback: () => updateFormState({ ...control._formState }),\n            reRenderRoot: true,\n        });\n        updateFormState((data) => ({\n            ...data,\n            isReady: true,\n        }));\n        control._formState.isReady = true;\n        return sub;\n    }, [control]);\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (props.mode) {\n            control._options.mode = props.mode;\n        }\n        if (props.reValidateMode) {\n            control._options.reValidateMode = props.reValidateMode;\n        }\n    }, [control, props.mode, props.reValidateMode]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n            control._focusError();\n        }\n    }, [control, props.errors]);\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [control, props.shouldUnregister]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, {\n                keepFieldsRef: true,\n                ...control._options.resetOptions,\n            });\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [control, props.values]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}","import{get as e,set as t}from\"react-hook-form\";const r=(t,r,o)=>{if(t&&\"reportValidity\"in t){const s=e(o,r);t.setCustomValidity(s&&s.message||\"\"),t.reportValidity()}},o=(e,t)=>{for(const o in t.fields){const s=t.fields[o];s&&s.ref&&\"reportValidity\"in s.ref?r(s.ref,o,e):s&&s.refs&&s.refs.forEach(t=>r(t,o,e))}},s=(r,s)=>{s.shouldUseNativeValidation&&o(r,s);const n={};for(const o in r){const f=e(s.fields,o),c=Object.assign(r[o]||{},{ref:f&&f.ref});if(i(s.names||Object.keys(r),o)){const r=Object.assign({},e(n,o));t(r,\"root\",c),t(n,o,r)}else t(n,o,c)}return n},i=(e,t)=>{const r=n(t);return e.some(e=>n(e).match(`^${r}\\\\.\\\\d+`))};function n(e){return e.replace(/\\]|\\[/g,\"\")}export{s as toNestErrors,o as validateFieldsNatively};\n//# sourceMappingURL=resolvers.mjs.map\n","/** A special constant with type `never` */\nexport const NEVER = Object.freeze({\n    status: \"aborted\",\n});\nexport /*@__NO_SIDE_EFFECTS__*/ function $constructor(name, initializer, params) {\n    function init(inst, def) {\n        var _a;\n        Object.defineProperty(inst, \"_zod\", {\n            value: inst._zod ?? {},\n            enumerable: false,\n        });\n        (_a = inst._zod).traits ?? (_a.traits = new Set());\n        inst._zod.traits.add(name);\n        initializer(inst, def);\n        // support prototype modifications\n        for (const k in _.prototype) {\n            if (!(k in inst))\n                Object.defineProperty(inst, k, { value: _.prototype[k].bind(inst) });\n        }\n        inst._zod.constr = _;\n        inst._zod.def = def;\n    }\n    // doesn't work if Parent has a constructor with arguments\n    const Parent = params?.Parent ?? Object;\n    class Definition extends Parent {\n    }\n    Object.defineProperty(Definition, \"name\", { value: name });\n    function _(def) {\n        var _a;\n        const inst = params?.Parent ? new Definition() : this;\n        init(inst, def);\n        (_a = inst._zod).deferred ?? (_a.deferred = []);\n        for (const fn of inst._zod.deferred) {\n            fn();\n        }\n        return inst;\n    }\n    Object.defineProperty(_, \"init\", { value: init });\n    Object.defineProperty(_, Symbol.hasInstance, {\n        value: (inst) => {\n            if (params?.Parent && inst instanceof params.Parent)\n                return true;\n            return inst?._zod?.traits?.has(name);\n        },\n    });\n    Object.defineProperty(_, \"name\", { value: name });\n    return _;\n}\n//////////////////////////////   UTILITIES   ///////////////////////////////////////\nexport const $brand = Symbol(\"zod_brand\");\nexport class $ZodAsyncError extends Error {\n    constructor() {\n        super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);\n    }\n}\nexport const globalConfig = {};\nexport function config(newConfig) {\n    if (newConfig)\n        Object.assign(globalConfig, newConfig);\n    return globalConfig;\n}\n","// functions\nexport function assertEqual(val) {\n    return val;\n}\nexport function assertNotEqual(val) {\n    return val;\n}\nexport function assertIs(_arg) { }\nexport function assertNever(_x) {\n    throw new Error();\n}\nexport function assert(_) { }\nexport function getEnumValues(entries) {\n    const numericValues = Object.values(entries).filter((v) => typeof v === \"number\");\n    const values = Object.entries(entries)\n        .filter(([k, _]) => numericValues.indexOf(+k) === -1)\n        .map(([_, v]) => v);\n    return values;\n}\nexport function joinValues(array, separator = \"|\") {\n    return array.map((val) => stringifyPrimitive(val)).join(separator);\n}\nexport function jsonStringifyReplacer(_, value) {\n    if (typeof value === \"bigint\")\n        return value.toString();\n    return value;\n}\nexport function cached(getter) {\n    const set = false;\n    return {\n        get value() {\n            if (!set) {\n                const value = getter();\n                Object.defineProperty(this, \"value\", { value });\n                return value;\n            }\n            throw new Error(\"cached value already set\");\n        },\n    };\n}\nexport function nullish(input) {\n    return input === null || input === undefined;\n}\nexport function cleanRegex(source) {\n    const start = source.startsWith(\"^\") ? 1 : 0;\n    const end = source.endsWith(\"$\") ? source.length - 1 : source.length;\n    return source.slice(start, end);\n}\nexport function floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nexport function defineLazy(object, key, getter) {\n    const set = false;\n    Object.defineProperty(object, key, {\n        get() {\n            if (!set) {\n                const value = getter();\n                object[key] = value;\n                return value;\n            }\n            throw new Error(\"cached value already set\");\n        },\n        set(v) {\n            Object.defineProperty(object, key, {\n                value: v,\n                // configurable: true,\n            });\n            // object[key] = v;\n        },\n        configurable: true,\n    });\n}\nexport function assignProp(target, prop, value) {\n    Object.defineProperty(target, prop, {\n        value,\n        writable: true,\n        enumerable: true,\n        configurable: true,\n    });\n}\nexport function getElementAtPath(obj, path) {\n    if (!path)\n        return obj;\n    return path.reduce((acc, key) => acc?.[key], obj);\n}\nexport function promiseAllObject(promisesObj) {\n    const keys = Object.keys(promisesObj);\n    const promises = keys.map((key) => promisesObj[key]);\n    return Promise.all(promises).then((results) => {\n        const resolvedObj = {};\n        for (let i = 0; i < keys.length; i++) {\n            resolvedObj[keys[i]] = results[i];\n        }\n        return resolvedObj;\n    });\n}\nexport function randomString(length = 10) {\n    const chars = \"abcdefghijklmnopqrstuvwxyz\";\n    let str = \"\";\n    for (let i = 0; i < length; i++) {\n        str += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return str;\n}\nexport function esc(str) {\n    return JSON.stringify(str);\n}\nexport const captureStackTrace = Error.captureStackTrace\n    ? Error.captureStackTrace\n    : (..._args) => { };\nexport function isObject(data) {\n    return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\nexport const allowsEval = cached(() => {\n    if (typeof navigator !== \"undefined\" && navigator?.userAgent?.includes(\"Cloudflare\")) {\n        return false;\n    }\n    try {\n        const F = Function;\n        new F(\"\");\n        return true;\n    }\n    catch (_) {\n        return false;\n    }\n});\nexport function isPlainObject(o) {\n    if (isObject(o) === false)\n        return false;\n    // modified constructor\n    const ctor = o.constructor;\n    if (ctor === undefined)\n        return true;\n    // modified prototype\n    const prot = ctor.prototype;\n    if (isObject(prot) === false)\n        return false;\n    // ctor doesn't have static `isPrototypeOf`\n    if (Object.prototype.hasOwnProperty.call(prot, \"isPrototypeOf\") === false) {\n        return false;\n    }\n    return true;\n}\nexport function numKeys(data) {\n    let keyCount = 0;\n    for (const key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n            keyCount++;\n        }\n    }\n    return keyCount;\n}\nexport const getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return \"undefined\";\n        case \"string\":\n            return \"string\";\n        case \"number\":\n            return Number.isNaN(data) ? \"nan\" : \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"function\":\n            return \"function\";\n        case \"bigint\":\n            return \"bigint\";\n        case \"symbol\":\n            return \"symbol\";\n        case \"object\":\n            if (Array.isArray(data)) {\n                return \"array\";\n            }\n            if (data === null) {\n                return \"null\";\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return \"promise\";\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return \"map\";\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return \"set\";\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return \"date\";\n            }\n            if (typeof File !== \"undefined\" && data instanceof File) {\n                return \"file\";\n            }\n            return \"object\";\n        default:\n            throw new Error(`Unknown data type: ${t}`);\n    }\n};\nexport const propertyKeyTypes = new Set([\"string\", \"number\", \"symbol\"]);\nexport const primitiveTypes = new Set([\"string\", \"number\", \"bigint\", \"boolean\", \"symbol\", \"undefined\"]);\nexport function escapeRegex(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n// zod-specific utils\nexport function clone(inst, def, params) {\n    const cl = new inst._zod.constr(def ?? inst._zod.def);\n    if (!def || params?.parent)\n        cl._zod.parent = inst;\n    return cl;\n}\nexport function normalizeParams(_params) {\n    const params = _params;\n    if (!params)\n        return {};\n    if (typeof params === \"string\")\n        return { error: () => params };\n    if (params?.message !== undefined) {\n        if (params?.error !== undefined)\n            throw new Error(\"Cannot specify both `message` and `error` params\");\n        params.error = params.message;\n    }\n    delete params.message;\n    if (typeof params.error === \"string\")\n        return { ...params, error: () => params.error };\n    return params;\n}\nexport function createTransparentProxy(getter) {\n    let target;\n    return new Proxy({}, {\n        get(_, prop, receiver) {\n            target ?? (target = getter());\n            return Reflect.get(target, prop, receiver);\n        },\n        set(_, prop, value, receiver) {\n            target ?? (target = getter());\n            return Reflect.set(target, prop, value, receiver);\n        },\n        has(_, prop) {\n            target ?? (target = getter());\n            return Reflect.has(target, prop);\n        },\n        deleteProperty(_, prop) {\n            target ?? (target = getter());\n            return Reflect.deleteProperty(target, prop);\n        },\n        ownKeys(_) {\n            target ?? (target = getter());\n            return Reflect.ownKeys(target);\n        },\n        getOwnPropertyDescriptor(_, prop) {\n            target ?? (target = getter());\n            return Reflect.getOwnPropertyDescriptor(target, prop);\n        },\n        defineProperty(_, prop, descriptor) {\n            target ?? (target = getter());\n            return Reflect.defineProperty(target, prop, descriptor);\n        },\n    });\n}\nexport function stringifyPrimitive(value) {\n    if (typeof value === \"bigint\")\n        return value.toString() + \"n\";\n    if (typeof value === \"string\")\n        return `\"${value}\"`;\n    return `${value}`;\n}\nexport function optionalKeys(shape) {\n    return Object.keys(shape).filter((k) => {\n        return shape[k]._zod.optin === \"optional\" && shape[k]._zod.optout === \"optional\";\n    });\n}\nexport const NUMBER_FORMAT_RANGES = {\n    safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\n    int32: [-2147483648, 2147483647],\n    uint32: [0, 4294967295],\n    float32: [-3.4028234663852886e38, 3.4028234663852886e38],\n    float64: [-Number.MAX_VALUE, Number.MAX_VALUE],\n};\nexport const BIGINT_FORMAT_RANGES = {\n    int64: [/* @__PURE__*/ BigInt(\"-9223372036854775808\"), /* @__PURE__*/ BigInt(\"9223372036854775807\")],\n    uint64: [/* @__PURE__*/ BigInt(0), /* @__PURE__*/ BigInt(\"18446744073709551615\")],\n};\nexport function pick(schema, mask) {\n    const newShape = {};\n    const currDef = schema._zod.def; //.shape;\n    for (const key in mask) {\n        if (!(key in currDef.shape)) {\n            throw new Error(`Unrecognized key: \"${key}\"`);\n        }\n        if (!mask[key])\n            continue;\n        // pick key\n        newShape[key] = currDef.shape[key];\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape: newShape,\n        checks: [],\n    });\n}\nexport function omit(schema, mask) {\n    const newShape = { ...schema._zod.def.shape };\n    const currDef = schema._zod.def; //.shape;\n    for (const key in mask) {\n        if (!(key in currDef.shape)) {\n            throw new Error(`Unrecognized key: \"${key}\"`);\n        }\n        if (!mask[key])\n            continue;\n        delete newShape[key];\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape: newShape,\n        checks: [],\n    });\n}\nexport function extend(schema, shape) {\n    if (!isPlainObject(shape)) {\n        throw new Error(\"Invalid input to extend: expected a plain object\");\n    }\n    const def = {\n        ...schema._zod.def,\n        get shape() {\n            const _shape = { ...schema._zod.def.shape, ...shape };\n            assignProp(this, \"shape\", _shape); // self-caching\n            return _shape;\n        },\n        checks: [], // delete existing checks\n    };\n    return clone(schema, def);\n}\nexport function merge(a, b) {\n    return clone(a, {\n        ...a._zod.def,\n        get shape() {\n            const _shape = { ...a._zod.def.shape, ...b._zod.def.shape };\n            assignProp(this, \"shape\", _shape); // self-caching\n            return _shape;\n        },\n        catchall: b._zod.def.catchall,\n        checks: [], // delete existing checks\n    });\n}\nexport function partial(Class, schema, mask) {\n    const oldShape = schema._zod.def.shape;\n    const shape = { ...oldShape };\n    if (mask) {\n        for (const key in mask) {\n            if (!(key in oldShape)) {\n                throw new Error(`Unrecognized key: \"${key}\"`);\n            }\n            if (!mask[key])\n                continue;\n            // if (oldShape[key]!._zod.optin === \"optional\") continue;\n            shape[key] = Class\n                ? new Class({\n                    type: \"optional\",\n                    innerType: oldShape[key],\n                })\n                : oldShape[key];\n        }\n    }\n    else {\n        for (const key in oldShape) {\n            // if (oldShape[key]!._zod.optin === \"optional\") continue;\n            shape[key] = Class\n                ? new Class({\n                    type: \"optional\",\n                    innerType: oldShape[key],\n                })\n                : oldShape[key];\n        }\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape,\n        checks: [],\n    });\n}\nexport function required(Class, schema, mask) {\n    const oldShape = schema._zod.def.shape;\n    const shape = { ...oldShape };\n    if (mask) {\n        for (const key in mask) {\n            if (!(key in shape)) {\n                throw new Error(`Unrecognized key: \"${key}\"`);\n            }\n            if (!mask[key])\n                continue;\n            // overwrite with non-optional\n            shape[key] = new Class({\n                type: \"nonoptional\",\n                innerType: oldShape[key],\n            });\n        }\n    }\n    else {\n        for (const key in oldShape) {\n            // overwrite with non-optional\n            shape[key] = new Class({\n                type: \"nonoptional\",\n                innerType: oldShape[key],\n            });\n        }\n    }\n    return clone(schema, {\n        ...schema._zod.def,\n        shape,\n        // optional: [],\n        checks: [],\n    });\n}\nexport function aborted(x, startIndex = 0) {\n    for (let i = startIndex; i < x.issues.length; i++) {\n        if (x.issues[i]?.continue !== true)\n            return true;\n    }\n    return false;\n}\nexport function prefixIssues(path, issues) {\n    return issues.map((iss) => {\n        var _a;\n        (_a = iss).path ?? (_a.path = []);\n        iss.path.unshift(path);\n        return iss;\n    });\n}\nexport function unwrapMessage(message) {\n    return typeof message === \"string\" ? message : message?.message;\n}\nexport function finalizeIssue(iss, ctx, config) {\n    const full = { ...iss, path: iss.path ?? [] };\n    // for backwards compatibility\n    if (!iss.message) {\n        const message = unwrapMessage(iss.inst?._zod.def?.error?.(iss)) ??\n            unwrapMessage(ctx?.error?.(iss)) ??\n            unwrapMessage(config.customError?.(iss)) ??\n            unwrapMessage(config.localeError?.(iss)) ??\n            \"Invalid input\";\n        full.message = message;\n    }\n    // delete (full as any).def;\n    delete full.inst;\n    delete full.continue;\n    if (!ctx?.reportInput) {\n        delete full.input;\n    }\n    return full;\n}\nexport function getSizableOrigin(input) {\n    if (input instanceof Set)\n        return \"set\";\n    if (input instanceof Map)\n        return \"map\";\n    if (input instanceof File)\n        return \"file\";\n    return \"unknown\";\n}\nexport function getLengthableOrigin(input) {\n    if (Array.isArray(input))\n        return \"array\";\n    if (typeof input === \"string\")\n        return \"string\";\n    return \"unknown\";\n}\nexport function issue(...args) {\n    const [iss, input, inst] = args;\n    if (typeof iss === \"string\") {\n        return {\n            message: iss,\n            code: \"custom\",\n            input,\n            inst,\n        };\n    }\n    return { ...iss };\n}\nexport function cleanEnum(obj) {\n    return Object.entries(obj)\n        .filter(([k, _]) => {\n        // return true if NaN, meaning it's not a number, thus a string key\n        return Number.isNaN(Number.parseInt(k, 10));\n    })\n        .map((el) => el[1]);\n}\n// instanceof\nexport class Class {\n    constructor(..._args) { }\n}\n","import { $constructor } from \"./core.js\";\nimport * as util from \"./util.js\";\nconst initializer = (inst, def) => {\n    inst.name = \"$ZodError\";\n    Object.defineProperty(inst, \"_zod\", {\n        value: inst._zod,\n        enumerable: false,\n    });\n    Object.defineProperty(inst, \"issues\", {\n        value: def,\n        enumerable: false,\n    });\n    Object.defineProperty(inst, \"message\", {\n        get() {\n            return JSON.stringify(def, util.jsonStringifyReplacer, 2);\n        },\n        enumerable: true,\n        // configurable: false,\n    });\n    Object.defineProperty(inst, \"toString\", {\n        value: () => inst.message,\n        enumerable: false,\n    });\n};\nexport const $ZodError = $constructor(\"$ZodError\", initializer);\nexport const $ZodRealError = $constructor(\"$ZodError\", initializer, { Parent: Error });\nexport function flattenError(error, mapper = (issue) => issue.message) {\n    const fieldErrors = {};\n    const formErrors = [];\n    for (const sub of error.issues) {\n        if (sub.path.length > 0) {\n            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n            fieldErrors[sub.path[0]].push(mapper(sub));\n        }\n        else {\n            formErrors.push(mapper(sub));\n        }\n    }\n    return { formErrors, fieldErrors };\n}\nexport function formatError(error, _mapper) {\n    const mapper = _mapper ||\n        function (issue) {\n            return issue.message;\n        };\n    const fieldErrors = { _errors: [] };\n    const processError = (error) => {\n        for (const issue of error.issues) {\n            if (issue.code === \"invalid_union\" && issue.errors.length) {\n                issue.errors.map((issues) => processError({ issues }));\n            }\n            else if (issue.code === \"invalid_key\") {\n                processError({ issues: issue.issues });\n            }\n            else if (issue.code === \"invalid_element\") {\n                processError({ issues: issue.issues });\n            }\n            else if (issue.path.length === 0) {\n                fieldErrors._errors.push(mapper(issue));\n            }\n            else {\n                let curr = fieldErrors;\n                let i = 0;\n                while (i < issue.path.length) {\n                    const el = issue.path[i];\n                    const terminal = i === issue.path.length - 1;\n                    if (!terminal) {\n                        curr[el] = curr[el] || { _errors: [] };\n                    }\n                    else {\n                        curr[el] = curr[el] || { _errors: [] };\n                        curr[el]._errors.push(mapper(issue));\n                    }\n                    curr = curr[el];\n                    i++;\n                }\n            }\n        }\n    };\n    processError(error);\n    return fieldErrors;\n}\nexport function treeifyError(error, _mapper) {\n    const mapper = _mapper ||\n        function (issue) {\n            return issue.message;\n        };\n    const result = { errors: [] };\n    const processError = (error, path = []) => {\n        var _a, _b;\n        for (const issue of error.issues) {\n            if (issue.code === \"invalid_union\" && issue.errors.length) {\n                // regular union error\n                issue.errors.map((issues) => processError({ issues }, issue.path));\n            }\n            else if (issue.code === \"invalid_key\") {\n                processError({ issues: issue.issues }, issue.path);\n            }\n            else if (issue.code === \"invalid_element\") {\n                processError({ issues: issue.issues }, issue.path);\n            }\n            else {\n                const fullpath = [...path, ...issue.path];\n                if (fullpath.length === 0) {\n                    result.errors.push(mapper(issue));\n                    continue;\n                }\n                let curr = result;\n                let i = 0;\n                while (i < fullpath.length) {\n                    const el = fullpath[i];\n                    const terminal = i === fullpath.length - 1;\n                    if (typeof el === \"string\") {\n                        curr.properties ?? (curr.properties = {});\n                        (_a = curr.properties)[el] ?? (_a[el] = { errors: [] });\n                        curr = curr.properties[el];\n                    }\n                    else {\n                        curr.items ?? (curr.items = []);\n                        (_b = curr.items)[el] ?? (_b[el] = { errors: [] });\n                        curr = curr.items[el];\n                    }\n                    if (terminal) {\n                        curr.errors.push(mapper(issue));\n                    }\n                    i++;\n                }\n            }\n        }\n    };\n    processError(error);\n    return result;\n}\n/** Format a ZodError as a human-readable string in the following form.\n *\n * From\n *\n * ```ts\n * ZodError {\n *   issues: [\n *     {\n *       expected: 'string',\n *       code: 'invalid_type',\n *       path: [ 'username' ],\n *       message: 'Invalid input: expected string'\n *     },\n *     {\n *       expected: 'number',\n *       code: 'invalid_type',\n *       path: [ 'favoriteNumbers', 1 ],\n *       message: 'Invalid input: expected number'\n *     }\n *   ];\n * }\n * ```\n *\n * to\n *\n * ```\n * username\n *   ✖ Expected number, received string at \"username\n * favoriteNumbers[0]\n *   ✖ Invalid input: expected number\n * ```\n */\nexport function toDotPath(path) {\n    const segs = [];\n    for (const seg of path) {\n        if (typeof seg === \"number\")\n            segs.push(`[${seg}]`);\n        else if (typeof seg === \"symbol\")\n            segs.push(`[${JSON.stringify(String(seg))}]`);\n        else if (/[^\\w$]/.test(seg))\n            segs.push(`[${JSON.stringify(seg)}]`);\n        else {\n            if (segs.length)\n                segs.push(\".\");\n            segs.push(seg);\n        }\n    }\n    return segs.join(\"\");\n}\nexport function prettifyError(error) {\n    const lines = [];\n    // sort by path length\n    const issues = [...error.issues].sort((a, b) => a.path.length - b.path.length);\n    // Process each issue\n    for (const issue of issues) {\n        lines.push(`✖ ${issue.message}`);\n        if (issue.path?.length)\n            lines.push(`  → at ${toDotPath(issue.path)}`);\n    }\n    // Convert Map to formatted string\n    return lines.join(\"\\n\");\n}\n","import * as core from \"./core.js\";\nimport * as errors from \"./errors.js\";\nimport * as util from \"./util.js\";\nexport const _parse = (_Err) => (schema, value, _ctx, _params) => {\n    const ctx = _ctx ? Object.assign(_ctx, { async: false }) : { async: false };\n    const result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise) {\n        throw new core.$ZodAsyncError();\n    }\n    if (result.issues.length) {\n        const e = new (_params?.Err ?? _Err)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())));\n        util.captureStackTrace(e, _params?.callee);\n        throw e;\n    }\n    return result.value;\n};\nexport const parse = /* @__PURE__*/ _parse(errors.$ZodRealError);\nexport const _parseAsync = (_Err) => async (schema, value, _ctx, params) => {\n    const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };\n    let result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise)\n        result = await result;\n    if (result.issues.length) {\n        const e = new (params?.Err ?? _Err)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())));\n        util.captureStackTrace(e, params?.callee);\n        throw e;\n    }\n    return result.value;\n};\nexport const parseAsync = /* @__PURE__*/ _parseAsync(errors.$ZodRealError);\nexport const _safeParse = (_Err) => (schema, value, _ctx) => {\n    const ctx = _ctx ? { ..._ctx, async: false } : { async: false };\n    const result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise) {\n        throw new core.$ZodAsyncError();\n    }\n    return result.issues.length\n        ? {\n            success: false,\n            error: new (_Err ?? errors.$ZodError)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\n        }\n        : { success: true, data: result.value };\n};\nexport const safeParse = /* @__PURE__*/ _safeParse(errors.$ZodRealError);\nexport const _safeParseAsync = (_Err) => async (schema, value, _ctx) => {\n    const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };\n    let result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise)\n        result = await result;\n    return result.issues.length\n        ? {\n            success: false,\n            error: new _Err(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\n        }\n        : { success: true, data: result.value };\n};\nexport const safeParseAsync = /* @__PURE__*/ _safeParseAsync(errors.$ZodRealError);\n","import{validateFieldsNatively as r,toNestErrors as e}from\"@hookform/resolvers\";import{appendErrors as o}from\"react-hook-form\";import*as n from\"zod/v4/core\";function t(r,e){try{var o=r()}catch(r){return e(r)}return o&&o.then?o.then(void 0,e):o}function s(r,e){for(var n={};r.length;){var t=r[0],s=t.code,i=t.message,a=t.path.join(\".\");if(!n[a])if(\"unionErrors\"in t){var u=t.unionErrors[0].errors[0];n[a]={message:u.message,type:u.code}}else n[a]={message:i,type:s};if(\"unionErrors\"in t&&t.unionErrors.forEach(function(e){return e.errors.forEach(function(e){return r.push(e)})}),e){var c=n[a].types,f=c&&c[t.code];n[a]=o(a,e,n,s,f?[].concat(f,t.message):t.message)}r.shift()}return n}function i(r,e){for(var n={};r.length;){var t=r[0],s=t.code,i=t.message,a=t.path.join(\".\");if(!n[a])if(\"invalid_union\"===t.code&&t.errors.length>0){var u=t.errors[0][0];n[a]={message:u.message,type:u.code}}else n[a]={message:i,type:s};if(\"invalid_union\"===t.code&&t.errors.forEach(function(e){return e.forEach(function(e){return r.push(e)})}),e){var c=n[a].types,f=c&&c[t.code];n[a]=o(a,e,n,s,f?[].concat(f,t.message):t.message)}r.shift()}return n}function a(o,a,u){if(void 0===u&&(u={}),function(r){return\"_def\"in r&&\"object\"==typeof r._def&&\"typeName\"in r._def}(o))return function(n,i,c){try{return Promise.resolve(t(function(){return Promise.resolve(o[\"sync\"===u.mode?\"parse\":\"parseAsync\"](n,a)).then(function(e){return c.shouldUseNativeValidation&&r({},c),{errors:{},values:u.raw?Object.assign({},n):e}})},function(r){if(function(r){return Array.isArray(null==r?void 0:r.issues)}(r))return{values:{},errors:e(s(r.errors,!c.shouldUseNativeValidation&&\"all\"===c.criteriaMode),c)};throw r}))}catch(r){return Promise.reject(r)}};if(function(r){return\"_zod\"in r&&\"object\"==typeof r._zod}(o))return function(s,c,f){try{return Promise.resolve(t(function(){return Promise.resolve((\"sync\"===u.mode?n.parse:n.parseAsync)(o,s,a)).then(function(e){return f.shouldUseNativeValidation&&r({},f),{errors:{},values:u.raw?Object.assign({},s):e}})},function(r){if(function(r){return r instanceof n.$ZodError}(r))return{values:{},errors:e(i(r.issues,!f.shouldUseNativeValidation&&\"all\"===f.criteriaMode),f)};throw r}))}catch(r){return Promise.reject(r)}};throw new Error(\"Invalid input: not a Zod schema\")}export{a as zodResolver};\n//# sourceMappingURL=zod.module.js.map\n","import { useState, useEffect } from \"react\";\nimport { ArrowLeft, Upload, Shield, Lock, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst driverRegistrationSchema = z.object({\n  vehicleType: z.string().min(1, \"Vehicle type is required\"),\n  vehiclePlate: z.string().min(1, \"License plate is required\"),\n  vehicleModel: z.string().min(1, \"Vehicle model is required\"),\n  vehicleYear: z.number().min(1990, \"Vehicle year must be 1990 or later\"),\n  driverLicense: z.string().min(1, \"Driver's license is required\"),\n  specializations: z.array(z.string()).optional(),\n  bondInsurance: z.boolean().optional(),\n  agreedToTerms: z.boolean().refine(val => val === true, {\n    message: \"You must agree to the terms and conditions\"\n  })\n});\n\ntype DriverRegistrationForm = z.infer<typeof driverRegistrationSchema>;\n\nexport default function DriverRegistration() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [uploadedDocs, setUploadedDocs] = useState<string[]>([]);\n  const [selectedTier, setSelectedTier] = useState<'RESTRICTED' | 'OPEN' | null>(null);\n\n  const form = useForm<DriverRegistrationForm>({\n    resolver: zodResolver(driverRegistrationSchema),\n    defaultValues: {\n      vehicleType: \"\",\n      vehiclePlate: \"\",\n      vehicleModel: \"\",\n      vehicleYear: new Date().getFullYear(),\n      driverLicense: \"\",\n      specializations: [],\n      bondInsurance: false,\n      agreedToTerms: false\n    }\n  });\n\n  useEffect(() => {\n    const tier = sessionStorage.getItem('selectedDriverTier') as 'RESTRICTED' | 'OPEN' | null;\n    setSelectedTier(tier);\n  }, []);\n\n  const onSubmit = async (data: DriverRegistrationForm) => {\n    try {\n      await apiRequest(\"/api/driver/register\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data,\n          driverTier: selectedTier,\n          accessLevel: selectedTier === 'RESTRICTED' ? 'RESTRICTED' : 'OPEN',\n          vehicleDocuments: uploadedDocs\n        })\n      });\n\n      toast({\n        title: \"Registration Successful\",\n        description: \"Your driver profile has been created successfully!\",\n      });\n\n      // Clear session storage and navigate to dashboard\n      sessionStorage.removeItem('selectedDriverTier');\n      navigate('/dashboard'); // Let dashboard routing handle driver redirect\n    } catch (error) {\n      console.error(\"Driver registration error:\", error);\n      toast({\n        title: \"Registration Failed\",\n        description: \"Please check your information and try again.\",\n      });\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      // In a real app, upload to cloud storage and get URLs\n      const newDocs = Array.from(files).map(file => `uploaded_${file.name}`);\n      setUploadedDocs(prev => [...prev, ...newDocs]);\n    }\n  };\n\n  const specializationOptions = [\n    \"JEWELRY\", \"ELECTRONICS\", \"DOCUMENTS\", \"PHARMACEUTICALS\", \n    \"LUXURY_GOODS\", \"LEGAL_DOCUMENTS\", \"MEDICAL_SUPPLIES\"\n  ];\n\n  if (!selectedTier) return null;\n\n  const isRestricted = selectedTier === 'RESTRICTED';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center mb-6 pt-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate('/driver-tier-selection')}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Driver Registration</h1>\n            <Badge variant={isRestricted ? 'destructive' : 'secondary'} className=\"mt-1\">\n              {isRestricted ? 'Premium - Restricted Access' : 'Standard - Open Access'}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Registration Form */}\n        <Card className=\"bg-white shadow-lg rounded-3xl border-0\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Shield className=\"w-8 h-8 text-blue-600\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              Driver Registration\n            </CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Complete your profile to start delivering with BrillPrime\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Vehicle Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full mr-3\" />\n                    Vehicle Information\n                  </h3>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"vehicleType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select vehicle type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"motorcycle\">Motorcycle</SelectItem>\n                              <SelectItem value=\"car\">Car</SelectItem>\n                              <SelectItem value=\"van\">Van</SelectItem>\n                              <SelectItem value=\"truck\">Truck</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"vehiclePlate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>License Plate</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"ABC-123-XY\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"vehicleModel\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Model</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Toyota Camry, Honda Civic, etc.\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"vehicleYear\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle Year</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"2020\" \n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Driver License */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full mr-3\" />\n                    Driver Information\n                  </h3>\n\n                  <FormField\n                    control={form.control}\n                    name=\"driverLicense\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Driver's License Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter your driver's license number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Specializations for Restricted Access */}\n                {isRestricted && (\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                      <Lock className=\"w-5 h-5 text-blue-600 mr-2\" />\n                      Premium Specializations\n                    </h3>\n\n                    <FormField\n                      control={form.control}\n                      name=\"specializations\"\n                      render={() => (\n                        <FormItem>\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            {specializationOptions.map((spec) => (\n                              <FormField\n                                key={spec}\n                                control={form.control}\n                                name=\"specializations\"\n                                render={({ field }) => {\n                                  return (\n                                    <FormItem\n                                      key={spec}\n                                      className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                    >\n                                      <FormControl>\n                                        <Checkbox\n                                          checked={field.value?.includes(spec)}\n                                          onCheckedChange={(checked) => {\n                                            return checked\n                                              ? field.onChange([...(field.value || []), spec])\n                                              : field.onChange(\n                                                  field.value?.filter(\n                                                    (value) => value !== spec\n                                                  ) || []\n                                                )\n                                          }}\n                                        />\n                                      </FormControl>\n                                      <FormLabel className=\"text-sm font-normal\">\n                                        {spec.replace(/_/g, ' ')}\n                                      </FormLabel>\n                                    </FormItem>\n                                  )\n                                }}\n                              />\n                            ))}\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"bondInsurance\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>\n                              Bond Insurance Coverage Required\n                            </FormLabel>\n                            <p className=\"text-sm text-muted-foreground\">\n                              I understand that bond insurance is required for premium driver access\n                            </p>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n\n                {/* Document Upload */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                    <Upload className=\"w-5 h-5 text-blue-600 mr-2\" />\n                    Required Documents\n                  </h3>\n\n                  <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\".pdf,.jpg,.jpeg,.png\"\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                      id=\"document-upload\"\n                    />\n                    <Label htmlFor=\"document-upload\" className=\"cursor-pointer\">\n                      <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-sm text-gray-600\">\n                        Click to upload vehicle registration, insurance, and driver's license\n                      </p>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        PDF, JPG, PNG up to 10MB each\n                      </p>\n                    </Label>\n                  </div>\n\n                  {uploadedDocs.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-medium text-gray-700\">Uploaded Documents:</p>\n                      {uploadedDocs.map((doc, index) => (\n                        <div key={index} className=\"flex items-center text-sm text-gray-600\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\" />\n                          {doc}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Terms and Conditions */}\n                <FormField\n                  control={form.control}\n                  name=\"agreedToTerms\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel>\n                          I agree to the Terms and Conditions\n                        </FormLabel>\n                        <p className=\"text-sm text-muted-foreground\">\n                          By checking this box, you agree to our driver terms of service and privacy policy\n                        </p>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Submit Button */}\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-xl font-semibold text-lg\"\n                  disabled={!form.formState.isValid}\n                >\n                  {isRestricted ? 'Submit for Review' : 'Complete Registration'}\n                  <ChevronRight className=\"w-5 h-5 ml-2\" />\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}"],"names":["CHECKBOX_NAME","createCheckboxContext","createCheckboxScope","createContextScope","CheckboxProviderImpl","useCheckboxContext","CheckboxProvider","props","__scopeCheckbox","checkedProp","children","defaultChecked","disabled","form","name","onCheckedChange","required","value","internal_do_not_use_render","checked","setChecked","useControllableState","control","setControl","React.useState","bubbleInput","setBubbleInput","hasConsumerStoppedPropagationRef","React.useRef","isFormControl","context","isIndeterminate","jsx","isFunction","TRIGGER_NAME","CheckboxTrigger","React.forwardRef","onKeyDown","onClick","checkboxProps","forwardedRef","composedRefs","useComposedRefs","initialCheckedStateRef","React.useEffect","reset","Primitive","getState","composeEventHandlers","event","prevChecked","Checkbox","jsxs","Fragment","CheckboxBubbleInput","INDICATOR_NAME","CheckboxIndicator","forceMount","indicatorProps","Presence","BUBBLE_INPUT_NAME","usePrevious","controlSize","useSize","input","inputProto","bubbles","defaultCheckedRef","className","ref","CheckboxPrimitive.Root","cn","CheckboxPrimitive.Indicator","Check","isCheckBoxInput","element","isDateObject","isNullOrUndefined","isObjectType","isObject","getEventValue","getNodeParentName","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","isFileListInstance","key","isKey","isUndefined","val","compact","stringToPath","get","object","path","defaultValue","result","isBoolean","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","FormProvider","getProxyFormState","formState","localProxyFormState","isRoot","_key","useIsomorphicLayoutEffect","useFormState","methods","exact","updateFormState","_localProxyFormState","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","isPrimitive","deepEqual","object1","object2","_internal_visited","keys1","keys2","val1","val2","useWatch","compute","_defaultValue","_compute","_computeFormValues","defaultValueMemo","updateValue","computedFormValues","useController","shouldUnregister","isArrayField","_props","_registerProps","fieldState","onChange","onBlur","elm","field","message","_shouldUnregisterField","updateMounted","Controller","appendErrors","validateAllFieldCriteria","errors","type","convertToArrayPayload","createSubject","_observers","observer","isEmptyObject","isFileInput","isHTMLElement","owner","isMultipleSelect","isRadioInput","isRadioOrCheckbox","live","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","validResult","getCheckboxValue","options","values","option","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","defaultReturn","getRadioValue","previous","getFieldValue","_f","getResolverOptions","fieldsNames","_fields","criteriaMode","shouldUseNativeValidation","isRegex","getRuleValue","rule","getValidationModes","mode","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","isWatched","isBlurEvent","watchName","iterateFieldsByAction","action","abortEarly","currentField","schemaErrorLookup","error","foundError","shouldRenderFormState","formStateData","_proxyFormState","shouldSubscribeByName","signalName","currentName","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","getValueAndMessage","validationData","validateField","disabledFieldNames","isFieldArray","refs","maxLength","minLength","min","max","pattern","validate","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_proxySubscribeFormState","_subjects","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_setValid","shouldUpdateValid","isValid","_runSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","target","isFieldValueUpdated","_updateIsFieldValueUpdated","validationModeBeforeSubmit","validationModeAfterSubmit","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_subscribe","_setFormState","subscribe","_setDisabledField","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","setFocus","useForm","_formControl","_values","formControl","rest","sub","isDirty","state","Form","FormFieldContext","React.createContext","FormField","useFormField","fieldContext","React.useContext","itemContext","FormItemContext","id","FormItem","React.useId","FormLabel","formItemId","Label","FormControl","formDescriptionId","formMessageId","Slot","FormDescription","FormMessage","body","r","t","o","s","n","f","c","i","$constructor","initializer","params","init","inst","def","_a","k","_","Parent","Definition","fn","_b","$ZodAsyncError","globalConfig","config","newConfig","jsonStringifyReplacer","captureStackTrace","_args","unwrapMessage","finalizeIssue","iss","ctx","full","_c","_d","_e","util.jsonStringifyReplacer","$ZodError","$ZodRealError","_parse","_Err","schema","_ctx","_params","core.$ZodAsyncError","util.finalizeIssue","core.config","util.captureStackTrace","parse","errors.$ZodRealError","_parseAsync","parseAsync","u","a","n.parse","n.parseAsync","n.$ZodError","driverRegistrationSchema","z.object","z.string","z.number","z.array","z.boolean","DriverRegistration","navigate","useLocation","toast","useToast","uploadedDocs","setUploadedDocs","useState","selectedTier","setSelectedTier","zodResolver","useEffect","tier","onSubmit","apiRequest","handleFileUpload","files","newDocs","file","prev","specializationOptions","isRestricted","Button","ArrowLeft","Badge","Card","CardHeader","Shield","CardTitle","CardDescription","CardContent","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Input","Lock","spec","Upload","doc","ChevronRight"],"mappings":"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","x_google_ignoreList":[0,2,4,5,6,7,8,9]}