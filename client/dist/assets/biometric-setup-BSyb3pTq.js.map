{"version":3,"file":"biometric-setup-BSyb3pTq.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/scan.js","../../src/components/ui/biometric-auth.tsx","../../src/pages/biometric-setup.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Scan = createLucideIcon(\"Scan\", [\n  [\"path\", { d: \"M3 7V5a2 2 0 0 1 2-2h2\", key: \"aa7l1z\" }],\n  [\"path\", { d: \"M17 3h2a2 2 0 0 1 2 2v2\", key: \"4qcy5o\" }],\n  [\"path\", { d: \"M21 17v2a2 2 0 0 1-2 2h-2\", key: \"6vwrx8\" }],\n  [\"path\", { d: \"M7 21H5a2 2 0 0 1-2-2v-2\", key: \"ioqczr\" }]\n]);\n\nexport { Scan as default };\n//# sourceMappingURL=scan.js.map\n","import React, { useState, useEffect } from 'react';\nimport { Button } from './button';\nimport { Card, CardContent } from './card';\nimport { Badge } from './badge';\nimport { Fingerprint, Scan, Shield, AlertTriangle, CheckCircle } from 'lucide-react';\n\ninterface BiometricAuthProps {\n  onSuccess: (type: 'fingerprint' | 'face') => void;\n  onError: (error: string) => void;\n  onCancel?: () => void;\n  mode?: 'setup' | 'authenticate';\n  title?: string;\n  description?: string;\n}\n\ninterface BiometricCapabilities {\n  available: boolean;\n  types: ('fingerprint' | 'face')[];\n  errorMessage?: string;\n}\n\nexport function BiometricAuth({\n  onSuccess,\n  onError,\n  onCancel,\n  mode = 'setup',\n  title,\n  description\n}: BiometricAuthProps) {\n  const [capabilities, setCapabilities] = useState<BiometricCapabilities>({\n    available: false,\n    types: []\n  });\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\n  const [selectedType, setSelectedType] = useState<'fingerprint' | 'face' | null>(null);\n\n  useEffect(() => {\n    checkBiometricCapabilities();\n  }, []);\n\n  const checkBiometricCapabilities = async () => {\n    try {\n      // Check WebAuthn support\n      if (!window.PublicKeyCredential) {\n        setCapabilities({\n          available: false,\n          types: [],\n          errorMessage: 'Biometric authentication not supported on this device'\n        });\n        return;\n      }\n\n      // Check platform authenticator availability\n      const available = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n\n      if (!available) {\n        setCapabilities({\n          available: false,\n          types: [],\n          errorMessage: 'No biometric authenticator available'\n        });\n        return;\n      }\n\n      // Detect available biometric types\n      const types: ('fingerprint' | 'face')[] = [];\n\n      // This is a simplified detection - in real implementation, you'd check device capabilities\n      if (navigator.userAgent.includes('iPhone') || navigator.userAgent.includes('iPad')) {\n        types.push('face'); // Face ID\n        if (navigator.userAgent.includes('iPhone')) {\n          types.push('fingerprint'); // Touch ID on older devices\n        }\n      } else if (navigator.userAgent.includes('Android')) {\n        types.push('fingerprint');\n        // Some Android devices support face unlock\n        types.push('face');\n      } else {\n        // Desktop/laptop - likely fingerprint or Windows Hello\n        types.push('fingerprint');\n      }\n\n      setCapabilities({\n        available: true,\n        types\n      });\n\n    } catch (error) {\n      console.error('Error checking biometric capabilities:', error);\n      setCapabilities({\n        available: false,\n        types: [],\n        errorMessage: 'Error checking biometric support'\n      });\n    }\n  };\n\n  const handleBiometricAuth = async (type: 'fingerprint' | 'face') => {\n    setIsAuthenticating(true);\n    setSelectedType(type);\n\n    try {\n      const challenge = await generateChallenge();\n\n      const publicKeyCredentialRequestOptions: PublicKeyCredentialRequestOptions = {\n        challenge: challenge,\n        allowCredentials: mode === 'authenticate' ? await getStoredCredentials() : [],\n        userVerification: 'required',\n        timeout: 60000\n      };\n\n      if (mode === 'setup') {\n        await createCredential(type, challenge);\n      } else {\n        await authenticateWithCredential(publicKeyCredentialRequestOptions);\n      }\n\n      onSuccess(type);\n    } catch (error: any) {\n      console.error('Biometric authentication error:', error);\n\n      let errorMessage = 'Biometric authentication failed';\n\n      if (error.name === 'NotAllowedError') {\n        errorMessage = 'Biometric authentication was cancelled or not allowed';\n      } else if (error.name === 'SecurityError') {\n        errorMessage = 'Security error during biometric authentication';\n      } else if (error.name === 'AbortError') {\n        errorMessage = 'Biometric authentication was aborted';\n      } else if (error.name === 'NotSupportedError') {\n        errorMessage = 'Biometric authentication not supported';\n      }\n\n      onError(errorMessage);\n    } finally {\n      setIsAuthenticating(false);\n      setSelectedType(null);\n    }\n  };\n\n  const createCredential = async (type: 'fingerprint' | 'face', challenge: ArrayBuffer) => {\n    const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions = {\n      challenge: challenge,\n      rp: {\n        name: \"BrillPrime\",\n        id: window.location.hostname,\n      },\n      user: {\n        id: new TextEncoder().encode(\"user-id\"), // Should be actual user ID\n        name: \"user@example.com\", // Should be actual user email\n        displayName: \"User Name\", // Should be actual user name\n      },\n      pubKeyCredParams: [\n        {\n          alg: -7, // ES256\n          type: \"public-key\"\n        }\n      ],\n      authenticatorSelection: {\n        authenticatorAttachment: \"platform\",\n        userVerification: \"required\",\n        requireResidentKey: true\n      },\n      timeout: 60000,\n      attestation: \"direct\"\n    };\n\n    const credential = await navigator.credentials.create({\n      publicKey: publicKeyCredentialCreationOptions\n    }) as PublicKeyCredential;\n\n    // Store credential information\n    await storeCredential(credential, type);\n  };\n\n  const authenticateWithCredential = async (options: PublicKeyCredentialRequestOptions) => {\n    const credential = await navigator.credentials.get({\n      publicKey: options\n    }) as PublicKeyCredential;\n\n    // Verify credential with server\n    await verifyCredential(credential);\n  };\n\n  const generateChallenge = async (): Promise<ArrayBuffer> => {\n    const response = await fetch('/api/auth/biometric/challenge', {\n      method: 'POST',\n      credentials: 'include'\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to generate challenge');\n    }\n\n    const { challenge } = await response.json();\n    return new Uint8Array(challenge).buffer;\n  };\n\n  const getStoredCredentials = async (): Promise<PublicKeyCredentialDescriptor[]> => {\n    const response = await fetch('/api/auth/biometric/credentials', {\n      credentials: 'include'\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to get stored credentials');\n    }\n\n    const { credentials } = await response.json();\n    return credentials;\n  };\n\n  const storeCredential = async (credential: PublicKeyCredential, type: 'fingerprint' | 'face') => {\n    const response = await fetch('/api/auth/biometric/store', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        credentialId: Array.from(new Uint8Array(credential.rawId)),\n        publicKey: Array.from(new Uint8Array((credential.response as AuthenticatorAttestationResponse).publicKey!)),\n        type: type\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to store credential');\n    }\n  };\n\n  const verifyCredential = async (credential: PublicKeyCredential) => {\n    const response = await fetch('/api/auth/biometric/verify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        credentialId: Array.from(new Uint8Array(credential.rawId)),\n        authenticatorData: Array.from(new Uint8Array((credential.response as AuthenticatorAssertionResponse).authenticatorData)),\n        signature: Array.from(new Uint8Array((credential.response as AuthenticatorAssertionResponse).signature)),\n        clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON))\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to verify credential');\n    }\n  };\n\n  if (!capabilities.available) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardContent className=\"p-6 text-center\">\n          <AlertTriangle className=\"w-12 h-12 text-amber-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Biometric Authentication Unavailable</h3>\n          <p className=\"text-gray-600 mb-4\">\n            {capabilities.errorMessage || 'Your device does not support biometric authentication'}\n          </p>\n          {onCancel && (\n            <Button variant=\"outline\" onClick={onCancel}>\n              Continue without Biometrics\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardContent className=\"p-6\">\n        <div className=\"text-center mb-6\">\n          <Shield className=\"w-16 h-16 text-blue-600 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-bold mb-2\">\n            {title || (mode === 'setup' ? 'Setup Biometric Authentication' : 'Biometric Authentication')}\n          </h2>\n          <p className=\"text-gray-600\">\n            {description || 'Choose your preferred biometric authentication method for secure access to your account'}\n          </p>\n        </div>\n\n        <div className=\"space-y-4\">\n          {capabilities.types.map((type) => (\n            <Button\n              key={type}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"w-full h-16 flex items-center justify-start space-x-4 p-4 hover:bg-blue-50 border-2 hover:border-blue-300\"\n              onClick={() => handleBiometricAuth(type)}\n              disabled={isAuthenticating}\n            >\n              <div className=\"flex items-center space-x-4\">\n                {type === 'fingerprint' ? (\n                  <Fingerprint className=\"w-8 h-8 text-blue-600\" />\n                ) : (\n                  <Scan className=\"w-8 h-8 text-blue-600\" />\n                )}\n                <div className=\"text-left\">\n                  <div className=\"font-semibold\">\n                    {type === 'fingerprint' ? 'Fingerprint' : 'Face Recognition'}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {type === 'fingerprint' \n                      ? 'Use your fingerprint to authenticate' \n                      : 'Use your face to authenticate'}\n                  </div>\n                </div>\n              </div>\n              {isAuthenticating && selectedType === type && (\n                <div className=\"ml-auto\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"></div>\n                </div>\n              )}\n            </Button>\n          ))}\n        </div>\n\n        {mode === 'setup' && (\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-start space-x-3\">\n              <CheckCircle className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n              <div className=\"text-sm text-blue-800\">\n                <p className=\"font-medium mb-1\">Security Features:</p>\n                <ul className=\"list-disc list-inside space-y-1\">\n                  <li>Your biometric data stays on your device</li>\n                  <li>End-to-end encrypted authentication</li>\n                  <li>Can be disabled anytime in settings</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {onCancel && (\n          <div className=\"mt-6 text-center\">\n            <Button variant=\"ghost\" onClick={onCancel}>\n              {mode === 'setup' ? 'Skip for Now' : 'Use Password Instead'}\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { BiometricAuth } from \"@/components/ui/biometric-auth\";\nimport { NotificationModal } from \"@/components/ui/notification-modal\";\nimport congratulationsIcon from \"../assets/images/congratulations_icon.png\";\nimport confirmationFailImg from \"../assets/images/confirmation_fail_img.png\";\n\nexport default function BiometricSetup() {\n  const [, setLocation] = useLocation();\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [showErrorModal, setShowErrorModal] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [biometricType, setBiometricType] = useState<string>(\"\");\n\n  const handleBiometricSuccess = (type: 'fingerprint' | 'face') => {\n    setBiometricType(type === 'fingerprint' ? 'Fingerprint' : 'Face ID');\n    setShowSuccessModal(true);\n  };\n\n  const handleBiometricError = (error: string) => {\n    setErrorMessage(error);\n    setShowErrorModal(true);\n  };\n\n  const handleSkipBiometric = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  const handleSuccessModalClose = () => {\n    setShowSuccessModal(false);\n    setLocation(\"/dashboard\");\n  };\n\n  const handleErrorModalClose = () => {\n    setShowErrorModal(false);\n  };\n\n  return (\n    <div className=\"w-full max-w-md mx-auto min-h-screen bg-white\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between px-6 py-4 pt-12\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setLocation(\"/profile\")}\n          className=\"p-2 hover:bg-gray-100 rounded-full\"\n        >\n          <ArrowLeft className=\"w-5 h-5 text-[var(--brill-text)]\" />\n        </Button>\n        <h1 className=\"text-lg font-bold text-[var(--brill-text)]\">\n          Biometric Setup\n        </h1>\n        <div className=\"w-9\"></div>\n      </div>\n\n      {/* Biometric Authentication Component */}\n      <div className=\"px-6 py-8\">\n        <BiometricAuth\n          onSuccess={handleBiometricSuccess}\n          onError={handleBiometricError}\n          onCancel={handleSkipBiometric}\n        />\n      </div>\n\n      {/* Success Modal */}\n      <NotificationModal\n        isOpen={showSuccessModal}\n        onClose={handleSuccessModalClose}\n        type=\"success\"\n        title=\"Biometric Setup Complete!\"\n        message={`${biometricType} authentication has been successfully enabled for your account. You can now use it to sign in quickly and securely.`}\n        imageSrc={congratulationsIcon}\n        buttonText=\"Continue\"\n      />\n\n      {/* Error Modal */}\n      <NotificationModal\n        isOpen={showErrorModal}\n        onClose={handleErrorModalClose}\n        type=\"error\"\n        title=\"Setup Failed\"\n        message={errorMessage}\n        imageSrc={confirmationFailImg}\n        buttonText=\"Try Again\"\n      />\n    </div>\n  );\n}"],"names":["Scan","createLucideIcon","BiometricAuth","onSuccess","onError","onCancel","mode","title","description","capabilities","setCapabilities","useState","isAuthenticating","setIsAuthenticating","selectedType","setSelectedType","useEffect","checkBiometricCapabilities","types","error","handleBiometricAuth","type","challenge","generateChallenge","publicKeyCredentialRequestOptions","getStoredCredentials","createCredential","authenticateWithCredential","errorMessage","publicKeyCredentialCreationOptions","credential","storeCredential","options","verifyCredential","response","credentials","Card","jsxs","CardContent","jsx","Shield","Button","Fingerprint","CheckCircle","AlertTriangle","BiometricSetup","setLocation","useLocation","showSuccessModal","setShowSuccessModal","showErrorModal","setShowErrorModal","setErrorMessage","biometricType","setBiometricType","handleBiometricSuccess","handleBiometricError","handleSkipBiometric","handleSuccessModalClose","handleErrorModalClose","ArrowLeft","NotificationModal","congratulationsIcon","confirmationFailImg"],"mappings":"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","x_google_ignoreList":[0]}