{"version":3,"file":"messages-bIS0NV49.js","sources":["../../src/pages/messages.tsx"],"sourcesContent":["\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Search, Plus, MessageCircle, User, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport accountCircle from \"../assets/images/account_circle.svg\";\n\n// Color constants\nconst COLORS = {\n  PRIMARY: '#4682b4',\n  SECONDARY: '#0b1a51', \n  ACTIVE: '#010e42',\n  TEXT: '#131313',\n  WHITE: '#ffffff'\n} as const;\n\ninterface Conversation {\n  id: string;\n  participantName: string;\n  participantRole: string;\n  participantAvatar?: string;\n  lastMessage: string;\n  lastMessageTime: string;\n  unreadCount: number;\n  isOnline: boolean;\n  conversationType: 'QUOTE' | 'ORDER' | 'GENERAL';\n  productName?: string;\n}\n\nexport default function Messages() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedFilter, setSelectedFilter] = useState<'ALL' | 'UNREAD' | 'MERCHANTS' | 'DRIVERS'>('ALL');\n\n  // Get conversations for the current user\n  const { data: conversations = [], isLoading } = useQuery({\n    queryKey: ['/api/conversations', user?.id, user?.role],\n    enabled: !!user?.id\n  });\n\n  // Sample data for demonstration\n  const sampleConversations: Conversation[] = [\n    {\n      id: \"conv-1\",\n      participantName: \"AgriMart Lagos\",\n      participantRole: \"MERCHANT\",\n      participantAvatar: \"\",\n      lastMessage: \"Your order of Premium Rice (50kg) is ready for pickup. Total: â‚¦45,000\",\n      lastMessageTime: \"2 min ago\",\n      unreadCount: 2,\n      isOnline: true,\n      conversationType: \"ORDER\",\n      productName: \"Premium Rice 50kg\"\n    },\n    {\n      id: \"conv-2\",\n      participantName: \"John Driver\",\n      participantRole: \"DRIVER\",\n      participantAvatar: \"\",\n      lastMessage: \"I'm 5 minutes away from your delivery location. Please be ready.\",\n      lastMessageTime: \"15 min ago\",\n      unreadCount: 1,\n      isOnline: true,\n      conversationType: \"ORDER\"\n    },\n    {\n      id: \"conv-3\",\n      participantName: \"FreshFoods Market\",\n      participantRole: \"MERCHANT\",\n      participantAvatar: \"\",\n      lastMessage: \"Thank you for your inquiry about bulk tomatoes. Our current price is â‚¦800 per basket.\",\n      lastMessageTime: \"1 hour ago\",\n      unreadCount: 0,\n      isOnline: false,\n      conversationType: \"QUOTE\",\n      productName: \"Fresh Tomatoes\"\n    },\n    {\n      id: \"conv-4\",\n      participantName: \"Sarah Express\",\n      participantRole: \"DRIVER\",\n      participantAvatar: \"\",\n      lastMessage: \"Your fuel delivery has been completed. Thank you for choosing our service!\",\n      lastMessageTime: \"2 hours ago\",\n      unreadCount: 0,\n      isOnline: false,\n      conversationType: \"ORDER\"\n    },\n    {\n      id: \"conv-5\",\n      participantName: \"TechMall Electronics\",\n      participantRole: \"MERCHANT\",\n      participantAvatar: \"\",\n      lastMessage: \"We have received your quote request for iPhone 15 Pro Max. We'll get back to you with pricing.\",\n      lastMessageTime: \"1 day ago\",\n      unreadCount: 0,\n      isOnline: true,\n      conversationType: \"QUOTE\",\n      productName: \"iPhone 15 Pro Max\"\n    }\n  ];\n\n  const filteredConversations = sampleConversations.filter(conv => {\n    const matchesSearch = conv.participantName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         conv.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         (conv.productName && conv.productName.toLowerCase().includes(searchQuery.toLowerCase()));\n\n    if (!matchesSearch) return false;\n\n    switch (selectedFilter) {\n      case 'UNREAD':\n        return conv.unreadCount > 0;\n      case 'MERCHANTS':\n        return conv.participantRole === 'MERCHANT';\n      case 'DRIVERS':\n        return conv.participantRole === 'DRIVER';\n      default:\n        return true;\n    }\n  });\n\n  const handleConversationClick = (conversationId: string) => {\n    setLocation(`/chat?conversationId=${conversationId}`);\n  };\n\n  const formatTime = (timeString: string) => {\n    return timeString;\n  };\n\n  const getConversationIcon = (type: string) => {\n    switch (type) {\n      case 'ORDER':\n        return 'ðŸ“¦';\n      case 'QUOTE':\n        return 'ðŸ’°';\n      default:\n        return 'ðŸ’¬';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'MERCHANT':\n        return '#4682b4';\n      case 'DRIVER':\n        return '#10b981';\n      default:\n        return '#6b7280';\n    }\n  };\n\n  const { socket, isConnected } = useWebSocket(true);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 w-full max-w-sm sm:max-w-md md:max-w-lg lg:max-w-xl xl:max-w-2xl mx-auto px-2 sm:px-4\">{/*Responsive container*/}\n      {/* Header */}\n      <div \n        className=\"sticky top-0 z-10 px-4 py-4\"\n        style={{ background: 'linear-gradient(135deg, #4682b4 0%, #0b1a51 100%)' }}\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => window.history.back()}\n              className=\"text-white hover:bg-white/20 w-8 h-8\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-lg font-bold text-white\">Messages</h1>\n              <p className=\"text-white/80 text-sm\">{filteredConversations.length} conversations</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation('/chat/new')}\n            className=\"text-white hover:bg-white/20 w-8 h-8\"\n          >\n            <Plus className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder=\"Search messages, contacts, or products...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-white/10 border-white/20 text-white placeholder-white/60 focus:bg-white/20\"\n          />\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"flex space-x-2 mt-3\">\n          {(['ALL', 'UNREAD', 'MERCHANTS', 'DRIVERS'] as const).map((filter) => (\n            <Button\n              key={filter}\n              variant={selectedFilter === filter ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setSelectedFilter(filter)}\n              className={`text-xs ${\n                selectedFilter === filter \n                  ? 'bg-white text-slate-900' \n                  : 'text-white/80 hover:bg-white/20'\n              }`}\n            >\n              {filter === 'ALL' ? 'All' : filter === 'UNREAD' ? 'Unread' : filter.toLowerCase()}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"px-4 pb-20\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <MessageCircle className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">\n              {searchQuery ? 'No messages found' : 'No conversations yet'}\n            </h3>\n            <p className=\"text-gray-500 mb-6\">\n              {searchQuery \n                ? 'Try adjusting your search or filters' \n                : 'Start chatting with merchants and drivers'}\n            </p>\n            <Button \n              onClick={() => setLocation('/commodities')}\n              style={{ backgroundColor: COLORS.PRIMARY }}\n              className=\"text-white\"\n            >\n              Browse Marketplace\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {filteredConversations.map((conversation) => (\n              <Card \n                key={conversation.id}\n                className=\"cursor-pointer hover:shadow-md transition-shadow border-l-4 hover:border-l-blue-500\"\n                onClick={() => handleConversationClick(conversation.id)}\n                style={{ \n                  borderLeftColor: conversation.unreadCount > 0 ? COLORS.PRIMARY : 'transparent',\n                  backgroundColor: conversation.unreadCount > 0 ? '#f8faff' : COLORS.WHITE\n                }}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    {/* Avatar */}\n                    <div className=\"relative flex-shrink-0\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarImage src={conversation.participantAvatar || accountCircle} />\n                        <AvatarFallback className=\"bg-gray-200\">\n                          {conversation.participantName.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      {conversation.isOnline && (\n                        <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white rounded-full\"></div>\n                      )}\n                    </div>\n\n                    {/* Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-semibold text-gray-900 truncate\">\n                            {conversation.participantName}\n                          </h3>\n                          <Badge \n                            variant=\"outline\" \n                            className=\"text-xs px-1.5 py-0.5\"\n                            style={{ \n                              borderColor: getRoleColor(conversation.participantRole),\n                              color: getRoleColor(conversation.participantRole)\n                            }}\n                          >\n                            {conversation.participantRole}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-xs text-gray-500\">\n                            {formatTime(conversation.lastMessageTime)}\n                          </span>\n                          {conversation.unreadCount > 0 && (\n                            <Badge \n                              className=\"bg-red-500 text-white text-xs px-1.5 py-0.5 min-w-5 h-5 flex items-center justify-center rounded-full\"\n                            >\n                              {conversation.unreadCount > 99 ? '99+' : conversation.unreadCount}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <span className=\"text-sm\">{getConversationIcon(conversation.conversationType)}</span>\n                        <span className=\"text-xs text-gray-600 font-medium\">\n                          {conversation.conversationType}\n                        </span>\n                        {conversation.productName && (\n                          <>\n                            <span className=\"text-xs text-gray-400\">â€¢</span>\n                            <span className=\"text-xs text-gray-600 truncate\">\n                              {conversation.productName}\n                            </span>\n                          </>\n                        )}\n                      </div>\n\n                      <p className=\"text-sm text-gray-600 line-clamp-2 leading-snug\">\n                        {conversation.lastMessage}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":["COLORS","Messages","setLocation","useLocation","user","useAuth","searchQuery","setSearchQuery","useState","selectedFilter","setSelectedFilter","conversations","isLoading","useQuery","filteredConversations","conv","handleConversationClick","conversationId","formatTime","timeString","getConversationIcon","type","getRoleColor","role","socket","isConnected","selectedConversation","setSelectedConversation","messages","setMessages","newMessage","setNewMessage","loading","setLoading","error","setError","jsxs","jsx","Button","ArrowLeft","Plus","Search","Input","e","filter","i","Card","CardContent","MessageCircle","conversation","Avatar","AvatarImage","accountCircle","AvatarFallback","n","Badge","Fragment"],"mappings":"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"}