{"version":3,"file":"fuel-ordering-BgCjcgrv.js","sources":["../../src/pages/fuel-ordering.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, MapPin, Search, Filter, Phone, Star, Navigation, Truck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface FuelStation {\n  id: string;\n  name: string;\n  brand: string;\n  address: string;\n  distance: number;\n  rating: number;\n  reviewCount: number;\n  pricePerLiter: number;\n  fuelTypes: string[];\n  isOpen: boolean;\n  deliveryTime: string;\n  phone: string;\n  logo?: string;\n}\n\ninterface LocationArea {\n  id: string;\n  name: string;\n  stationCount: number;\n  averagePrice: number;\n}\n\nexport default function FuelOrdering() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [selectedStation, setSelectedStation] = useState<Station | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get user's current location for distance calculation\n  const [userLocation, setUserLocation] = useState<Location | null>(null);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        (error) => {\n          console.error('Error getting location:', error);\n        }\n      );\n    }\n  }, []);\n\n  const filteredStations = mockStations.filter(station =>\n    station.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    station.address.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleStationSelect = (station: Station) => {\n    setSelectedStation(station);\n  };\n\n  const handlePlaceOrder = (fuelType: string, quantity: number, unitPrice: number) => {\n    if (!selectedStation || !user) return;\n\n    setIsLoading(true);\n\n    // Navigate to fuel order details with pre-filled data\n    const orderData = {\n      stationId: selectedStation.id,\n      stationName: selectedStation.name,\n      fuelType,\n      quantity,\n      unitPrice,\n      totalAmount: quantity * unitPrice\n    };\n\n    setTimeout(() => {\n      setIsLoading(false);\n      setLocation('/fuel-order-details', { state: orderData });\n    }, 500);\n  };\n\n  const handleCreateFuelOrder = async (orderData: any) => {\n    setIsLoading(true);\n    \n    try {\n      // Create fuel order with enhanced data\n      const response = await fetch('/api/fuel/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          stationId: selectedStation?.id || 'station_1',\n          fuelType: orderData.fuelType,\n          quantity: parseFloat(orderData.quantity),\n          unitPrice: parseFloat(orderData.unitPrice),\n          totalAmount: parseFloat(orderData.totalAmount),\n          deliveryAddress: orderData.deliveryAddress,\n          deliveryLatitude: orderData.coordinates?.latitude || 6.5244,\n          deliveryLongitude: orderData.coordinates?.longitude || 3.3792,\n          scheduledDeliveryTime: orderData.scheduledTime,\n          notes: orderData.notes || `Fuel delivery order - ${orderData.fuelType}`,\n          paymentMethod: orderData.paymentMethod || 'wallet'\n        }),\n        credentials: 'include'\n      });\n\n      const result = await response.json();\n      \n      if (response.ok && result.success) {\n        // Show success message\n        setModalData({\n          isOpen: true,\n          type: \"success\",\n          title: \"Order Placed Successfully! ðŸšš\",\n          message: `Your ${orderData.fuelType} order has been placed. A driver will be assigned shortly. Track your order in real-time.`\n        });\n\n        // Navigate to tracking page after delay\n        setTimeout(() => {\n          setLocation(`/fuel-delivery-tracking?orderId=${result.order.id}`);\n        }, 2000);\n      } else {\n        throw new Error(result.error || 'Failed to place order');\n      }\n    } catch (error) {\n      console.error('Error creating fuel order:', error);\n      setModalData({\n        isOpen: true,\n        type: \"error\",\n        title: \"Order Failed\",\n        message: error.message || \"Unable to place your order. Please try again or contact support.\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n}"],"names":["FuelOrdering","useLocation","user","selectedStation","setSelectedStation","useState","searchQuery","setSearchQuery","isLoading","setIsLoading","userLocation","setUserLocation","useEffect","position","error","station"],"mappings":"+CAgCA,SAAwBA,GAAe,CACbC,EAAA,EACxB,KAAM,CAAE,KAAAC,CAAA,EAAS,QAAA,EACX,CAACC,EAAiBC,CAAkB,EAAIC,EAAAA,SAAyB,IAAI,EACrE,CAACC,EAAaC,CAAc,EAAIF,EAAAA,SAAS,EAAE,EAC3C,CAACG,EAAWC,CAAY,EAAIJ,EAAAA,SAAS,EAAK,EAG1C,CAACK,EAAcC,CAAe,EAAIN,EAAAA,SAA0B,IAAI,EAEtEO,EAAAA,UAAU,IAAM,CACV,UAAU,aACZ,UAAU,YAAY,mBACnBC,GAAa,CACZF,EAAgB,CACd,SAAUE,EAAS,OAAO,SAC1B,UAAWA,EAAS,OAAO,SAAA,CAC5B,CACH,EACCC,GAAU,CACT,QAAQ,MAAM,0BAA2BA,CAAK,CAChD,CAAA,CAGN,EAAG,CAAA,CAAE,EAEoB,aAAa,UACpCC,EAAQ,KAAK,YAAA,EAAc,SAAST,EAAY,YAAA,CAAa,GAC7DS,EAAQ,QAAQ,YAAA,EAAc,SAAST,EAAY,aAAa,CAAA,CAoFpE"}